from abc import ABC, abstractmethod
import asyncio
import os
import json
import shutil
import sys
from datetime import datetime
from typing import Optional, List, Dict, Any, Set
import multiprocessing
from multiprocessing import Process

from loguru import logger
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.utils.keyboard import InlineKeyboardBuilder

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–∞—à–∏ –º–æ–¥—É–ª–∏
from utils.config import Config
from utils.bot_state import BotContext, IdleState, RunningState
from utils.keyboard_factory import KeyboardFactory
from database.repository import Repository, DatabaseConnectionPool
from services.chat_cache import ChatCacheService, CacheObserver, ChatInfo
from commands.commands import (
    StartCommand,
    HelpCommand,
    SetLastMessageCommand,
    GetLastMessageCommand,
    ForwardNowCommand,
    TestMessageCommand,
    FindLastMessageCommand
)

class BotManager:
    """Manages multiple bot instances"""
    _instance = None
    
    def __new__(cls):
        if cls._instance is None:
            cls._instance = super(BotManager, cls).__new__(cls)
            # Create a manager instance properly
            import multiprocessing
            cls._instance.manager = multiprocessing.Manager()
            cls._instance.bots = cls._instance.manager.dict()
            cls._instance.processes = {}
            
            from loguru import logger
            logger.info("BotManager singleton created")
        return cls._instance
    
    def add_bot(self, bot_id: str, process: Process):
        """Add a bot process to the manager"""
        self.bots[bot_id] = {
            'status': 'running',
            'pid': process.pid,
            'started_at': datetime.now().isoformat()
        }
        self.processes[bot_id] = process
        
        from loguru import logger
        logger.info(f"Added bot {bot_id} to manager. Total bots: {len(self.bots)}")
        logger.debug(f"Current bots: {list(self.bots.keys())}")
    
    def remove_bot(self, bot_id: str):
        """Remove a bot from the manager"""
        if bot_id in self.processes:
            process = self.processes[bot_id]
            if process.is_alive():
                process.terminate()
                process.join(timeout=5)
            del self.processes[bot_id]
            del self.bots[bot_id]
    
    def get_bot_status(self, bot_id: str):
        """Get status of a specific bot"""
        return self.bots.get(bot_id, None)
    
    def list_bots(self):
        """List all managed bots"""
        from loguru import logger
        logger.debug(f"Listing bots. Total: {len(self.bots)}, Keys: {list(self.bots.keys())}")
        return dict(self.bots)



# Add this function to run a bot in a separate process
def run_bot_process(bot_token: str, owner_id: int, source_channels: list, bot_id: str):
    """Wrapper to run bot in a separate process"""
    # Set up logging for the subprocess
    from loguru import logger
    logger.add(f"bot_{bot_id}.log", rotation="10 MB")
    
    # Create new event loop for this process
    loop = asyncio.new_event_loop()
    asyncio.set_event_loop(loop)
    
    try:
        loop.run_until_complete(run_bot_instance(bot_token, owner_id, source_channels, bot_id))
    except Exception as e:
        logger.error(f"Error in bot process {bot_id}: {e}")
    finally:
        loop.close()


# Add this function to run a bot in a separate process
async def run_bot_instance(bot_token: str, owner_id: int, source_channels: list, bot_id: str):
    """Run a bot instance with specific configuration"""
    import os
    import sys
    
    # Create a temporary config for this bot instance
    os.environ['BOT_TOKEN'] = bot_token
    os.environ['OWNER_ID'] = str(owner_id)
    
    # Create a custom config class for this instance
    from utils.config import Config
    
    # Override the singleton pattern for this process
    Config._instance = None
    config = Config()
    config.bot_token = bot_token
    config.owner_id = owner_id
    config.source_channels = source_channels
    
    # Create a new bot instance
    bot_instance = ForwarderBot()
    bot_instance.bot_id = bot_id  # Add identifier
    
    try:
        await bot_instance.start()
    except Exception as e:
        logger.error(f"Bot {bot_id} crashed: {e}")
        raise


class ForwarderBot(CacheObserver):
    """–û—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞—Å—Å –±–æ—Ç–∞ –¥–ª—è –ø–µ—Ä–µ—Å—ã–ª–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ –∫–∞–Ω–∞–ª–æ–≤ –≤ —á–∞—Ç—ã —Å –∞–≤—Ç–æ–∑–∞–∫—Ä–µ–ø–ª–µ–Ω–∏–µ–º"""
    
    def __init__(self):
        self.config = Config()
        self.bot = Bot(token=self.config.bot_token)
        self.dp = Dispatcher()
        self.context = BotContext(self.bot, self.config)
        self.cache_service = ChatCacheService()
        self.awaiting_channel_input = None  # –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –≤–≤–æ–¥–∞ –∫–∞–Ω–∞–ª–∞
        self.awaiting_interval_input = None  # –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –≤–≤–æ–¥–∞ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞
        
        # –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è ID –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —á–∞—Ç–∞—Ö
        self.pinned_messages = {}
        
        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Å–µ–±—è –∫–∞–∫ –Ω–∞–±–ª—é–¥–∞—Ç–µ–ª—å –∫—ç—à–∞
        self.cache_service.add_observer(self)
        
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        self._setup_handlers()

    async def clone_bot_prompt(self, callback: types.CallbackQuery):
        """Prompt for cloning the bot"""
        if callback.from_user.id != self.config.owner_id:
            return
        
        # Set state to wait for new token
        self.awaiting_clone_token = callback.from_user.id
        
        kb = InlineKeyboardBuilder()
        kb.button(text="–û—Ç–º–µ–Ω–∞", callback_data="back_to_main")
        
        await callback.message.edit_text(
            "ü§ñ –ö–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –±–æ—Ç–∞\n\n"
            "1. –°–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤–æ–≥–æ –±–æ—Ç–∞ —á–µ—Ä–µ–∑ @BotFather\n"
            "2. –ü–æ–ª—É—á–∏—Ç–µ –Ω–æ–≤—ã–π —Ç–æ–∫–µ–Ω –±–æ—Ç–∞\n"
            "3. –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–æ–∫–µ–Ω —Å—é–¥–∞\n\n"
            "–ü–æ—Å–ª–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–æ–∫–µ–Ω–∞ –≤—ã —Å–º–æ–∂–µ—Ç–µ –≤—ã–±—Ä–∞—Ç—å:\n"
            "‚Ä¢ –ó–∞–ø—É—Å—Ç–∏—Ç—å –∫–ª–æ–Ω –≤ —Ç–µ–∫—É—â–µ–º –ø—Ä–æ—Ü–µ—Å—Å–µ\n"
            "‚Ä¢ –°–æ–∑–¥–∞—Ç—å —Ñ–∞–π–ª—ã –¥–ª—è –æ—Ç–¥–µ–ª—å–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞\n\n"
            "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—ã–π —Ç–æ–∫–µ–Ω —Å–æ–æ–±—â–µ–Ω–∏–µ–º üí¨",
            reply_markup=kb.as_markup()
        )
        await callback.answer()

    # Let's also add the overwrite_clone method that was referenced earlier
    async def overwrite_clone(self, callback: types.CallbackQuery):
        """Handler for overwriting existing clone"""
        if callback.from_user.id != self.config.owner_id:
            return
        
        # Parse data: overwrite_clone_dirname_token
        parts = callback.data.split('_', 3)
        if len(parts) != 4:
            await callback.answer("–û—à–∏–±–∫–∞ –≤ –¥–∞–Ω–Ω—ã—Ö")
            return
        
        clone_dir = parts[2]
        new_token = parts[3]
        
        # Delete existing clone
        current_dir = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
        clone_path = os.path.join(os.path.dirname(current_dir), clone_dir)
        
        if os.path.exists(clone_path):
            shutil.rmtree(clone_path)
        
        # Perform clone
        await self._perform_bot_clone(new_token, clone_dir, callback.message)
        await callback.answer()
    async def _perform_bot_clone(self, new_token: str, clone_dir: str, progress_msg=None):
        """Perform the actual bot cloning"""
        try:
            # Get bot info for the new token
            test_bot = Bot(token=new_token)
            bot_info = await test_bot.get_me()
            await test_bot.session.close()
            
            # Get paths
            current_dir = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
            clone_path = os.path.join(os.path.dirname(current_dir), clone_dir)
            
            # Create clone directory
            os.makedirs(clone_path, exist_ok=True)
            
            # Files and directories to copy
            items_to_copy = [
                'bot.py',
                'requirements.txt',
                'Dockerfile',
                'utils',
                'commands',
                'services',
                'database'
            ]
            
            # Copy files and directories
            for item in items_to_copy:
                src = os.path.join(current_dir, item)
                dst = os.path.join(clone_path, item)
                
                if os.path.isdir(src):
                    shutil.copytree(src, dst, dirs_exist_ok=True)
                elif os.path.isfile(src):
                    shutil.copy2(src, dst)
            
            # Create new .env file with new token
            env_content = f"""# Telegram Bot Token from @BotFather
BOT_TOKEN={new_token}

# Your Telegram user ID (get from @userinfobot)
OWNER_ID={self.config.owner_id}

# Source channel username or ID (bot must be admin)
# Can be either numeric ID (-100...) or channel username without @
SOURCE_CHANNEL={self.config.source_channels[0] if self.config.source_channels else ''}
"""
            
            with open(os.path.join(clone_path, '.env'), 'w') as f:
                f.write(env_content)
            
            # Copy bot_config.json with same channels
            if os.path.exists(os.path.join(current_dir, 'bot_config.json')):
                shutil.copy2(
                    os.path.join(current_dir, 'bot_config.json'),
                    os.path.join(clone_path, 'bot_config.json')
                )
            
            # Create a start script for Linux
            start_script = f"""#!/bin/bash
cd "{clone_path}"
python bot.py
"""
            
            start_script_path = os.path.join(clone_path, 'start_bot.sh')
            with open(start_script_path, 'w') as f:
                f.write(start_script)
            
            # Make the script executable
            os.chmod(start_script_path, 0o755)
            
            # Create Windows start script
            start_script_windows = f"""@echo off
cd /d "{clone_path}"
python bot.py
pause
"""
            
            with open(os.path.join(clone_path, 'start_bot.bat'), 'w') as f:
                f.write(start_script_windows)
            
            # Create README.md for the clone
            readme_content = f"""# Bot Clone: @{bot_info.username}

This is a clone of the main forwarding bot.

## Configuration
- Bot Token: Configured in .env
- Owner ID: {self.config.owner_id}
- Source Channels: {', '.join(self.config.source_channels)}

## Running the bot

### Linux/Mac:
```bash
./start_bot.sh
```

### Windows:
```bash
start_bot.bat
```

### Manual:
```bash
python bot.py
```

## Important Notes
- Make sure the bot is admin in all source channels
- The bot will forward messages to the same target chats as the main bot
- Database is separate from the main bot
"""
            
            with open(os.path.join(clone_path, 'README.md'), 'w') as f:
                f.write(readme_content)
            
            if progress_msg:
                kb = InlineKeyboardBuilder()
                kb.button(text="–ù–∞–∑–∞–¥", callback_data="back_to_main")
                
                success_text = (
                    f"‚úÖ –ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∫–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω!\n\n"
                    f"üìÅ –ü–∞–ø–∫–∞: {clone_dir}\n"
                    f"ü§ñ –ò–º—è –±–æ—Ç–∞: @{bot_info.username}\n\n"
                    f"–î–ª—è –∑–∞–ø—É—Å–∫–∞ –∫–ª–æ–Ω–∞:\n"
                    f"1. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ –ø–∞–ø–∫—É: {clone_path}\n"
                    f"2. –ó–∞–ø—É—Å—Ç–∏—Ç–µ: `python bot.py` –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å–∫—Ä–∏–ø—Ç start_bot.sh (Linux) / start_bot.bat (Windows)\n\n"
                    f"–ö–ª–æ–Ω –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ —Å —Ç–µ–º–∏ –∂–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –∫–∞–Ω–∞–ª–æ–≤."
                )
                
                await progress_msg.edit_text(success_text, reply_markup=kb.as_markup())
            
            logger.info(f"Successfully cloned bot to {clone_dir}")
            
        except Exception as e:
            logger.error(f"Error during bot clone: {e}")
            if progress_msg:
                kb = InlineKeyboardBuilder()
                kb.button(text="–ù–∞–∑–∞–¥", callback_data="back_to_main")
                
                await progress_msg.edit_text(
                    f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏: {e}",
                    reply_markup=kb.as_markup()
                )
            raise


    async def create_clone_files(self, callback: types.CallbackQuery):
        """Create clone files for separate deployment"""
        if callback.from_user.id != self.config.owner_id:
            return
        
        # Parse data: clone_files_token
        parts = callback.data.split('_', 2)
        if len(parts) != 3:
            await callback.answer("–û—à–∏–±–∫–∞ –≤ –¥–∞–Ω–Ω—ã—Ö")
            return
        
        new_token = parts[2]
        
        progress_msg = await callback.message.edit_text("üîÑ –°–æ–∑–¥–∞–Ω–∏–µ —Ñ–∞–π–ª–æ–≤ –∫–ª–æ–Ω–∞...")
        
        try:
            # Verify the new token
            test_bot = Bot(token=new_token)
            bot_info = await test_bot.get_me()
            await test_bot.session.close()
            
            # Create clone directory name
            clone_dir = f"bot_clone_{bot_info.username}"
            
            # Check if clone already exists
            current_dir = os.path.dirname(os.path.abspath(__file__))
            clone_path = os.path.join(os.path.dirname(current_dir), clone_dir)
            
            if os.path.exists(clone_path):
                kb = InlineKeyboardBuilder()
                kb.button(text="–î–∞, –ø–µ—Ä–µ–∑–∞–ø–∏—Å–∞—Ç—å", callback_data=f"overwrite_clone_{clone_dir}_{new_token}")
                kb.button(text="–û—Ç–º–µ–Ω–∞", callback_data="back_to_main")
                kb.adjust(2)
                
                await progress_msg.edit_text(
                    f"‚ö†Ô∏è –ö–ª–æ–Ω –±–æ—Ç–∞ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ –ø–∞–ø–∫–µ: {clone_dir}\n\n"
                    "–ü–µ—Ä–µ–∑–∞–ø–∏—Å–∞—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∫–ª–æ–Ω?",
                    reply_markup=kb.as_markup()
                )
                return
            
            # Create clone files
            await self._perform_bot_clone(new_token, clone_dir, progress_msg)
            
        except Exception as e:
            kb = InlineKeyboardBuilder()
            kb.button(text="–ù–∞–∑–∞–¥", callback_data="back_to_main")
            
            await progress_msg.edit_text(
                f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ñ–∞–π–ª–æ–≤ –∫–ª–æ–Ω–∞: {e}",
                reply_markup=kb.as_markup()
            )
            logger.error(f"Failed to create clone files: {e}")
        
        await callback.answer()
    async def clone_bot_inline(self, callback: types.CallbackQuery):
        """Run cloned bot in the same solution"""
        if callback.from_user.id != self.config.owner_id:
            return
        
        # Parse data: clone_inline_token
        parts = callback.data.split('_', 2)
        if len(parts) != 3:
            await callback.answer("–û—à–∏–±–∫–∞ –≤ –¥–∞–Ω–Ω—ã—Ö")
            return
        
        new_token = parts[2]
        
        await callback.message.edit_text("üöÄ –ó–∞–ø—É—Å–∫–∞—é –∫–ª–æ–Ω –±–æ—Ç–∞...")
        
        try:
            # Verify the token
            test_bot = Bot(token=new_token)
            bot_info = await test_bot.get_me()
            await test_bot.session.close()
            
            bot_id = f"bot_{bot_info.username}"
            
            # Check if this bot is already running
            if bot_id in self.bot_manager.processes:
                if self.bot_manager.processes[bot_id].is_alive():
                    kb = InlineKeyboardBuilder()
                    kb.button(text="–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å", callback_data=f"stop_clone_{bot_id}")
                    kb.button(text="–ù–∞–∑–∞–¥", callback_data="manage_clones")
                    kb.adjust(2)
                    
                    await callback.message.edit_text(
                        f"‚ö†Ô∏è –ë–æ—Ç @{bot_info.username} —É–∂–µ –∑–∞–ø—É—â–µ–Ω!",
                        reply_markup=kb.as_markup()
                    )
                    await callback.answer()
                    return
            
            # Create a new process for the bot
            process = Process(
                target=run_bot_process,
                args=(new_token, self.config.owner_id, self.config.source_channels, bot_id),
                name=bot_id
            )
            
            process.start()
            self.bot_manager.add_bot(bot_id, process)
            self.child_bots.append(bot_id)
            
            kb = InlineKeyboardBuilder()
            kb.button(text="–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–ª–æ–Ω–∞–º–∏", callback_data="manage_clones")
            kb.button(text="–ù–∞–∑–∞–¥", callback_data="back_to_main")
            kb.adjust(2)
            
            await callback.message.edit_text(
                f"‚úÖ –ë–æ—Ç @{bot_info.username} —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω!\n\n"
                f"ID –ø—Ä–æ—Ü–µ—Å—Å–∞: {process.pid}\n"
                f"–°—Ç–∞—Ç—É—Å: –†–∞–±–æ—Ç–∞–µ—Ç\n\n"
                "–ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø—Ä–æ—Ü–µ—Å—Å–µ –∏ –±—É–¥–µ—Ç –ø–µ—Ä–µ—Å—ã–ª–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è.",
                reply_markup=kb.as_markup()
            )
            
        except Exception as e:
            kb = InlineKeyboardBuilder()
            kb.button(text="–ù–∞–∑–∞–¥", callback_data="back_to_main")
            
            await callback.message.edit_text(
                f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –∫–ª–æ–Ω–∞: {e}",
                reply_markup=kb.as_markup()
            )
            logger.error(f"Failed to start clone bot: {e}")
        
        await callback.answer()

    async def manage_clones(self, callback: types.CallbackQuery):
        """Manage running bot clones"""
        if callback.from_user.id != self.config.owner_id:
            return
        
        bots = self.bot_manager.list_bots()
        
        # Count clones (excluding main bot)
        clone_count = len([b for b in bots if b != "main"])
        
        if clone_count == 0:
            kb = InlineKeyboardBuilder()
            kb.button(text="–î–æ–±–∞–≤–∏—Ç—å –∫–ª–æ–Ω", callback_data="clone_bot")
            kb.button(text="–ù–∞–∑–∞–¥", callback_data="back_to_main")
            kb.adjust(2)
            
            await callback.message.edit_text(
                "üìã –ù–µ—Ç –∑–∞–ø—É—â–µ–Ω–Ω—ã—Ö –∫–ª–æ–Ω–æ–≤.\n\n"
                "–î–æ–±–∞–≤—å—Ç–µ –Ω–æ–≤—ã–π –∫–ª–æ–Ω –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ –±–æ—Ç–∞–º–∏.",
                reply_markup=kb.as_markup()
            )
        else:
            text = "ü§ñ –ó–∞–ø—É—â–µ–Ω–Ω—ã–µ –±–æ—Ç—ã:\n\n"
            kb = InlineKeyboardBuilder()
            
            # Show main bot info first
            main_info = bots.get("main", {})
            text += f"‚Ä¢ –û—Å–Ω–æ–≤–Ω–æ–π –±–æ—Ç\n  –°—Ç–∞—Ç—É—Å: üü¢ –†–∞–±–æ—Ç–∞–µ—Ç\n  PID: {main_info.get('pid', 'N/A')}\n\n"
            
            # Show clones
            for bot_id, info in bots.items():
                if bot_id == "main":
                    continue
                    
                # Check if process is alive
                process = self.bot_manager.processes.get(bot_id)
                if process and process.is_alive():
                    status = "üü¢ –†–∞–±–æ—Ç–∞–µ—Ç"
                else:
                    status = "üî¥ –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
                
                # Extract bot username from bot_id
                bot_username = bot_id.replace("bot_", "@")
                text += f"‚Ä¢ {bot_username}\n  –°—Ç–∞—Ç—É—Å: {status}\n  PID: {info.get('pid', 'N/A')}\n  –ó–∞–ø—É—â–µ–Ω: {info.get('started_at', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}\n\n"
                
                if status == "üü¢ –†–∞–±–æ—Ç–∞–µ—Ç":
                    kb.button(text=f"–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å {bot_username}", callback_data=f"stop_clone_{bot_id}")
                else:
                    kb.button(text=f"–ó–∞–ø—É—Å—Ç–∏—Ç—å {bot_username}", callback_data=f"start_clone_{bot_id}")
            
            kb.button(text="–î–æ–±–∞–≤–∏—Ç—å –∫–ª–æ–Ω", callback_data="clone_bot")
            kb.button(text="–ù–∞–∑–∞–¥", callback_data="back_to_main")
            kb.adjust(1)
            
            await callback.message.edit_text(text, reply_markup=kb.as_markup())
        
        await callback.answer()

    async def stop_clone(self, callback: types.CallbackQuery):
        """Stop a running bot clone"""
        if callback.from_user.id != self.config.owner_id:
            return
        
        bot_id = callback.data.replace("stop_clone_", "")
        
        try:
            self.bot_manager.remove_bot(bot_id)
            await callback.answer(f"–ë–æ—Ç {bot_id} –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        except Exception as e:
            await callback.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ: {e}")
        
        await self.manage_clones(callback)

    # Update the clone_bot_submit method to provide inline option
    async def clone_bot_submit(self, message: types.Message):
        """Handler for new bot token submission"""
        if message.from_user.id != self.config.owner_id:
            return
        
        if not hasattr(self, 'awaiting_clone_token') or self.awaiting_clone_token != message.from_user.id:
            return
        
        new_token = message.text.strip()
        
        if not new_token or ':' not in new_token:
            await message.reply("‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ç–æ–∫–µ–Ω–∞.")
            return
        
        self.awaiting_clone_token = None
        
        # Verify the token
        try:
            test_bot = Bot(token=new_token)
            bot_info = await test_bot.get_me()
            await test_bot.session.close()
            
            kb = InlineKeyboardBuilder()
            kb.button(text="üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç—å —Å–µ–π—á–∞—Å", callback_data=f"clone_inline_{new_token}")
            kb.button(text="üíæ –°–æ–∑–¥–∞—Ç—å —Ñ–∞–π–ª—ã", callback_data=f"clone_files_{new_token}")
            kb.button(text="–û—Ç–º–µ–Ω–∞", callback_data="back_to_main")
            kb.adjust(2)
            
            await message.reply(
                f"‚úÖ –¢–æ–∫–µ–Ω –ø—Ä–æ–≤–µ—Ä–µ–Ω!\n"
                f"–ë–æ—Ç: @{bot_info.username}\n\n"
                "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                reply_markup=kb.as_markup()
            )
            
        except Exception as e:
            await message.reply(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–æ–∫–µ–Ω–∞: {e}")

    # Add cleanup method to stop all child bots on shutdown
    async def cleanup(self):
        """Stop all child bots"""
        for bot_id in self.child_bots:
            try:
                self.bot_manager.remove_bot(bot_id)
            except Exception as e:
                logger.error(f"Error stopping bot {bot_id}: {e}")

    async def clone_bot_prompt(self, callback: types.CallbackQuery):
        """Prompt for cloning the bot"""
        if callback.from_user.id != self.config.owner_id:
            return
        
        # Set state to wait for new token
        self.awaiting_clone_token = callback.from_user.id
        
        kb = InlineKeyboardBuilder()
        kb.button(text="–û—Ç–º–µ–Ω–∞", callback_data="back_to_main")
        
        await callback.message.edit_text(
            "ü§ñ –ö–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –±–æ—Ç–∞\n\n"
            "1. –°–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤–æ–≥–æ –±–æ—Ç–∞ —á–µ—Ä–µ–∑ @BotFather\n"
            "2. –ü–æ–ª—É—á–∏—Ç–µ –Ω–æ–≤—ã–π —Ç–æ–∫–µ–Ω –±–æ—Ç–∞\n"
            "3. –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–æ–∫–µ–Ω —Å—é–¥–∞\n\n"
            "–ü–æ—Å–ª–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–æ–∫–µ–Ω–∞ –≤—ã —Å–º–æ–∂–µ—Ç–µ –≤—ã–±—Ä–∞—Ç—å:\n"
            "‚Ä¢ –ó–∞–ø—É—Å—Ç–∏—Ç—å –∫–ª–æ–Ω –≤ —Ç–µ–∫—É—â–µ–º –ø—Ä–æ—Ü–µ—Å—Å–µ\n"
            "‚Ä¢ –°–æ–∑–¥–∞—Ç—å —Ñ–∞–π–ª—ã –¥–ª—è –æ—Ç–¥–µ–ª—å–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞\n\n"
            "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—ã–π —Ç–æ–∫–µ–Ω —Å–æ–æ–±—â–µ–Ω–∏–µ–º üí¨",
            reply_markup=kb.as_markup()
        )
        await callback.answer()

    # Let's also add the overwrite_clone method that was referenced earlier
    async def overwrite_clone(self, callback: types.CallbackQuery):
        """Handler for overwriting existing clone"""
        if callback.from_user.id != self.config.owner_id:
            return
        
        # Parse data: overwrite_clone_dirname_token
        parts = callback.data.split('_', 3)
        if len(parts) != 4:
            await callback.answer("–û—à–∏–±–∫–∞ –≤ –¥–∞–Ω–Ω—ã—Ö")
            return
        
        clone_dir = parts[2]
        new_token = parts[3]
        
        # Delete existing clone
        current_dir = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
        clone_path = os.path.join(os.path.dirname(current_dir), clone_dir)
        
        if os.path.exists(clone_path):
            shutil.rmtree(clone_path)
        
        # Perform clone
        await self._perform_bot_clone(new_token, clone_dir, callback.message)
        await callback.answer()
    def is_admin(self, user_id: int) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º"""
        return self.config.is_admin(user_id)
        
    def _setup_handlers(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–æ–±—â–µ–Ω–∏–π —Å –ø–∞—Ç—Ç–µ—Ä–Ω–æ–º Command"""
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        commands = {
            "start": StartCommand(
                isinstance(self.context.state, RunningState)
            ),
            "help": HelpCommand(),
            "setlast": SetLastMessageCommand(self.bot),
            "getlast": GetLastMessageCommand(),
            "forwardnow": ForwardNowCommand(self.context),
            "test": TestMessageCommand(self.bot),
            "findlast": FindLastMessageCommand(self.bot)
        }
        
        for cmd_name, cmd_handler in commands.items():
            self.dp.message.register(cmd_handler.execute, Command(cmd_name))
    
        # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –¥–ª—è –≤–≤–æ–¥–∞ –∫–∞–Ω–∞–ª–∞
        self.dp.message.register(
            self.add_channel_submit,
            lambda message: message.from_user.id == self.awaiting_channel_input
        )
        
        # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –¥–ª—è –≤–≤–æ–¥–∞ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ –≤—Ä—É—á–Ω—É—é
        self.dp.message.register(
            self.set_interval_submit,
            lambda message: message.from_user.id == self.awaiting_interval_input
        )
        
        # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä—è–º–æ–π –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–∞–Ω–∞–ª–∞
        self.dp.message.register(
            self.add_channel_prompt,
            Command("addchannel")
        )
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–æ—Å—Ç–æ–≤ –≤ –∫–∞–Ω–∞–ª–µ
        self.dp.channel_post.register(self.handle_channel_post)
        
        self.dp.message.register(
            self.clone_bot_submit,
            lambda message: hasattr(self, 'awaiting_clone_token') and 
                          self.awaiting_clone_token == message.from_user.id
        )
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ callback-–∑–∞–ø—Ä–æ—Å–æ–≤
        callbacks = {
            "toggle_forward": self.toggle_forwarding,
            "set_interval": self.set_interval_prompt,
            "set_interval_value_": self.set_interval_value,
            "add_channel_input": self.add_channel_input,
            "remove_channel_": self.remove_channel,
            "remove_": self.remove_chat,
            "list_chats": self.list_chats,
            "back_to_main": self.main_menu,
            "channels": self.manage_channels,
            "add_channel": self.add_channel_prompt,
            "forward_now": self.forward_now_handler,
            "test_pin": self.test_pin_handler,
            "clone_bot": self.clone_bot_prompt,
            "clone_inline_": self.clone_bot_inline,
            "overwrite_clone_": self.overwrite_clone,
            "clone_files_": self.create_clone_files,
            "stop_clone_": self.stop_clone,
            "manage_clones": self.manage_clones

        }
        
        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–º –ø–æ—Ä—è–¥–∫–æ–º, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤
        for prefix, handler in callbacks.items():
            self.dp.callback_query.register(
                handler,
                lambda c, p=prefix: c.data.startswith(p)
            )
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –±–æ—Ç–∞ –≤ —á–∞—Ç—ã
        self.dp.my_chat_member.register(self.handle_chat_member)

    async def find_latest_message(self, channel_id: str) -> Optional[int]:
        """–í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –∫–∞–Ω–∞–ª–µ"""
        try:
            # –ù–∞—á–∏–Ω–∞–µ–º —Å —Ä–∞–∑—É–º–Ω–æ –≤—ã—Å–æ–∫–æ–≥–æ —á–∏—Å–ª–∞ –∏ –∏–¥–µ–º –Ω–∞–∑–∞–¥
            max_id = 10000
            
            for test_id in range(max_id, 0, -1):
                try:
                    # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–æ–æ–±—â–µ–Ω–∏–∏
                    msg = await self.bot.get_messages(channel_id, message_ids=test_id)
                    if msg and not getattr(msg, 'empty', False):
                        return test_id
                except Exception:
                    # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –æ—à–∏–±–∫–∏ –¥–ª—è –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
                    pass
                    
                # –î–µ–ª–∞–µ–º –ø–∞—É–∑—É –∫–∞–∂–¥—ã–µ 1000 –ø—Ä–æ–≤–µ—Ä–æ–∫, —á—Ç–æ–±—ã –Ω–µ –ø—Ä–µ–≤—ã—Å–∏—Ç—å –ª–∏–º–∏—Ç—ã API
                if test_id % 1000 == 0:
                    await asyncio.sleep(0.5)
                    
                # –ù–µ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ ID
                if max_id - test_id > 5000:
                    break
                    
            return None
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –∫–∞–Ω–∞–ª–µ {channel_id}: {e}")
            return None

    async def forward_now_handler(self, callback: types.CallbackQuery):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ–π –ø–µ—Ä–µ—Å—ã–ª–∫–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        if not self.is_admin(callback.from_user.id):
            return
            
        await callback.message.edit_text(
            "üîÑ –í—ã–ø–æ–ª–Ω—è—é –Ω–µ–º–µ–¥–ª–µ–Ω–Ω—É—é –ø–µ—Ä–µ—Å—ã–ª–∫—É –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ –≤—Å–µ—Ö –∫–∞–Ω–∞–ª–æ–≤...",
            reply_markup=None
        )
        
        success = await self.context.forward_latest_messages()
        
        if success:
            await callback.message.edit_text(
                "‚úÖ –°–æ–æ–±—â–µ–Ω–∏—è —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ—Å–ª–∞–Ω—ã –∏ –∑–∞–∫—Ä–µ–ø–ª–µ–Ω—ã",
                reply_markup=KeyboardFactory.create_main_keyboard(
                    isinstance(self.context.state, RunningState),
                )
            )
        else:
            await callback.message.edit_text(
                "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ—Å—ã–ª–∫–µ —Å–æ–æ–±—â–µ–Ω–∏–π. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏.",
                reply_markup=KeyboardFactory.create_main_keyboard(
                    isinstance(self.context.state, RunningState),
                )
            )
            
        await callback.answer()

    async def test_pin_handler(self, callback: types.CallbackQuery):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–∏ –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π"""
        if not self.is_admin(callback.from_user.id):
            return
            
        # –ü–æ–ª—É—á–∞–µ–º ID —á–∞—Ç–∞ –∏–∑ callback_data (—Ñ–æ—Ä–º–∞—Ç test_pin_CHAT_ID)
        parts = callback.data.split('_')
        if len(parts) != 3:
            await callback.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö")
            return
            
        chat_id = int(parts[2])
        
        try:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç
            test_message = await self.bot.send_message(
                chat_id,
                "üîÑ –≠—Ç–æ —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ñ—É–Ω–∫—Ü–∏–∏ –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–∏—è. –ë–æ—Ç –ø–æ–ø—ã—Ç–∞–µ—Ç—Å—è –∑–∞–∫—Ä–µ–ø–∏—Ç—å –µ–≥–æ."
            )
            
            # –ü—Ä–æ–±—É–µ–º –∑–∞–∫—Ä–µ–ø–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ
            await self.bot.pin_chat_message(
                chat_id=chat_id,
                message_id=test_message.message_id,
                disable_notification=True
            )
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
            self.pinned_messages[str(chat_id)] = test_message.message_id
            await Repository.save_pinned_message(str(chat_id), test_message.message_id)
            
            await callback.message.edit_text(
                f"‚úÖ –¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∏ –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–æ –≤ —á–∞—Ç–µ {chat_id}",
                reply_markup=KeyboardFactory.create_chat_list_keyboard(
                    await self._get_chat_info()
                )
            )
            
            # –ß–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥ –æ—Ç–∫—Ä–µ–ø–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ç–µ—Å—Ç–∞
            await asyncio.sleep(5)
            
            await self.bot.unpin_chat_message(
                chat_id=chat_id,
                message_id=test_message.message_id
            )
            
        except Exception as e:
            await callback.message.edit_text(
                f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–∏—è: {e}\n\n"
                f"–ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ –±–æ—Ç –∏–º–µ–µ—Ç –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –≤ —á–∞—Ç–µ {chat_id} —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é –∑–∞–∫—Ä–µ–ø–ª—è—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è.",
                reply_markup=KeyboardFactory.create_chat_list_keyboard(
                    await self._get_chat_info()
                )
            )
            
        await callback.answer()

    async def toggle_forwarding(self, callback: types.CallbackQuery):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ –≤–∫–ª—é—á–µ–Ω–∏—è/–≤—ã–∫–ª—é—á–µ–Ω–∏—è –ø–µ—Ä–µ—Å—ã–ª–∫–∏"""
        if not self.is_admin(callback.from_user.id):
            return

        if isinstance(self.context.state, IdleState):
            interval = await Repository.get_config("rotation_interval", "7200")  # 2 —á–∞—Å–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            await callback.message.edit_text(
                f"üîÑ –ó–∞–ø—É—Å–∫ —Ä–æ—Ç–∞—Ü–∏–∏ —Å –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–º {int(interval)//60} –º–∏–Ω—É—Ç..."
            )
            await self.context.start()
        else:
            await self.context.stop()

        await callback.message.edit_text(
            f"–ü–µ—Ä–µ—Å—ã–ª–∫–∞ {'–∑–∞–ø—É—â–µ–Ω–∞' if isinstance(self.context.state, RunningState) else '–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞'}!",
            reply_markup=KeyboardFactory.create_main_keyboard(
                isinstance(self.context.state, RunningState),
            )
        )
        await callback.answer()

    async def set_interval_prompt(self, callback: types.CallbackQuery):
        """–û–∫–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ —Ä–æ—Ç–∞—Ü–∏–∏ –∫–∞–Ω–∞–ª–æ–≤"""
        if not self.is_admin(callback.from_user.id):
            return
            
        current_interval = await Repository.get_config("rotation_interval", "7200")  # 2 —á–∞—Å–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        current_minutes = int(current_interval) // 60
        
        try:
            await callback.message.edit_text(
                f"‚è±Ô∏è –ò–Ω—Ç–µ—Ä–≤–∞–ª —Ä–æ—Ç–∞—Ü–∏–∏ –∫–∞–Ω–∞–ª–æ–≤\n\n"
                f"–¢–µ–∫—É—â–∏–π –∏–Ω—Ç–µ—Ä–≤–∞–ª: {current_minutes} –º–∏–Ω.\n\n"
                f"–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª —Ä–æ—Ç–∞—Ü–∏–∏ –º–µ–∂–¥—É –∫–∞–Ω–∞–ª–∞–º–∏.\n"
                f"–≠—Ç–æ –≤—Ä–µ–º—è, —á–µ—Ä–µ–∑ –∫–æ—Ç–æ—Ä–æ–µ –±–æ—Ç –±—É–¥–µ—Ç –ø–µ—Ä–µ–∫–ª—é—á–∞—Ç—å—Å—è –º–µ–∂–¥—É –∫–∞–Ω–∞–ª–∞–º–∏.",
                reply_markup=KeyboardFactory.create_rotation_interval_keyboard()
            )
        except Exception as e:
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—à–∏–±–∫—É –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
            # –ï—Å–ª–∏ —ç—Ç–æ –æ—à–∏–±–∫–∞ "message is not modified", –ø—Ä–æ—Å—Ç–æ –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º –µ—ë
            if "message is not modified" not in str(e):
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        
        await callback.answer()

    async def set_interval_value(self, callback: types.CallbackQuery):
        """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞"""
        if not self.is_admin(callback.from_user.id):
            return
            
        parts = callback.data.split('_')
        if len(parts) != 3:
            # –ï—Å–ª–∏ —ç—Ç–æ –∑–∞–ø—Ä–æ—Å –Ω–∞ —Ä—É—á–Ω–æ–π –≤–≤–æ–¥ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞
            if callback.data == "set_interval_value_custom":
                self.awaiting_interval_input = callback.from_user.id
                
                kb = InlineKeyboardBuilder()
                kb.button(text="–û—Ç–º–µ–Ω–∞", callback_data="set_interval")
                
                await callback.message.edit_text(
                    "‚è±Ô∏è –í–≤–µ–¥–∏—Ç–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª —Ä–æ—Ç–∞—Ü–∏–∏ –≤ –º–∏–Ω—É—Ç–∞—Ö (–æ—Ç 5 –¥–æ 1440):",
                    reply_markup=kb.as_markup()
                )
                await callback.answer()
                return
                
            await callback.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö")
            return
            
        try:
            # –ó–Ω–∞—á–µ–Ω–∏–µ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
            interval = int(parts[2])
            
            await Repository.set_config("rotation_interval", str(interval))
            
            # –ï—Å–ª–∏ –±–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç, –æ–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª
            if isinstance(self.context.state, RunningState):
                self.context.state.update_interval(interval)
                
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
            if interval >= 3600:
                hours = interval // 3600
                minutes = (interval % 3600) // 60
                display = f"{hours}—á"
                if minutes > 0:
                    display += f" {minutes}–º"
            else:
                display = f"{interval // 60}–º"
                
            await callback.message.edit_text(
                f"‚úÖ –ò–Ω—Ç–µ—Ä–≤–∞–ª —Ä–æ—Ç–∞—Ü–∏–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞ {display}",
                reply_markup=KeyboardFactory.create_main_keyboard(
                    isinstance(self.context.state, RunningState),
                )
            )
            
            logger.info(f"–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∏–Ω—Ç–µ—Ä–≤–∞–ª —Ä–æ—Ç–∞—Ü–∏–∏ {interval} —Å–µ–∫—É–Ω–¥ ({interval//60} –º–∏–Ω—É—Ç)")
            
        except ValueError:
            await callback.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞")
        
        await callback.answer()

    async def set_interval_submit(self, message: types.Message):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ä—É—á–Ω–æ–≥–æ –≤–≤–æ–¥–∞ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞"""
        if not self.is_admin(message.from_user.id) or message.from_user.id != self.awaiting_interval_input:
            return
            
        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è
        self.awaiting_interval_input = None
        
        try:
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤–≤–æ–¥ –≤ –º–∏–Ω—É—Ç—ã
            minutes = int(message.text.strip())
            
            if minutes < 5:
                await message.reply("‚ö†Ô∏è –ò–Ω—Ç–µ—Ä–≤–∞–ª –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–µ –º–µ–Ω–µ–µ 5 –º–∏–Ω—É—Ç")
                return
                
            if minutes > 1440:  # 24 —á–∞—Å–∞
                await message.reply("‚ö†Ô∏è –ò–Ω—Ç–µ—Ä–≤–∞–ª –Ω–µ –¥–æ–ª–∂–µ–Ω –ø—Ä–µ–≤—ã—à–∞—Ç—å 24 —á–∞—Å–∞ (1440 –º–∏–Ω—É—Ç)")
                return
                
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ —Å–µ–∫—É–Ω–¥—ã –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
            interval = minutes * 60
            
            await Repository.set_config("rotation_interval", str(interval))
            
            # –ï—Å–ª–∏ –±–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç, –æ–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª
            if isinstance(self.context.state, RunningState):
                self.context.state.update_interval(interval)
                
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
            if interval >= 3600:
                hours = interval // 3600
                remaining_minutes = (interval % 3600) // 60
                display = f"{hours}—á"
                if remaining_minutes > 0:
                    display += f" {remaining_minutes}–º"
            else:
                display = f"{minutes}–º"
                
            kb = InlineKeyboardBuilder()
            kb.button(text="–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main")
                
            await message.reply(
                f"‚úÖ –ò–Ω—Ç–µ—Ä–≤–∞–ª —Ä–æ—Ç–∞—Ü–∏–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞ {display}",
                reply_markup=kb.as_markup()
            )
            
            logger.info(f"–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∏–Ω—Ç–µ—Ä–≤–∞–ª —Ä–æ—Ç–∞—Ü–∏–∏ {interval} —Å–µ–∫—É–Ω–¥ ({minutes} –º–∏–Ω—É—Ç)")
            
        except ValueError:
            await message.reply(
                "‚ùå –û—à–∏–±–∫–∞: –≤–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ –º–∏–Ω—É—Ç\n"
                "–ù–∞–ø—Ä–∏–º–µ—Ä: 60 –¥–ª—è –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ –≤ 1 —á–∞—Å"
            )

    async def _get_chat_info(self) -> Dict[int, str]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —á–∞—Ç–∞—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ –º–µ–Ω—é"""
        chats = await Repository.get_target_chats()
        chat_info = {}
        
        for chat_id in chats:
            info = await self.cache_service.get_chat_info(self.bot, chat_id)
            if info:
                chat_info[chat_id] = info.title
                
        return chat_info

    async def add_channel_prompt(self, callback: types.CallbackQuery):
        """–£–ª—É—á—à–µ–Ω–Ω–æ–µ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–∞–Ω–∞–ª–∞"""
        if not self.is_admin(callback.from_user.id):
            return
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è —Ä–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω–µ–Ω–Ω—ã—Ö —Ç–∏–ø–æ–≤ –∫–∞–Ω–∞–ª–æ–≤
        kb = InlineKeyboardBuilder()
        kb.button(text="üîÑ –í–≤–µ—Å—Ç–∏ ID –∏–ª–∏ username –∫–∞–Ω–∞–ª–∞", callback_data="add_channel_input")
        kb.button(text="–ù–∞–∑–∞–¥", callback_data="channels")
        kb.adjust(1)
        
        await callback.message.edit_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–∞–Ω–∞–ª–∞:\n\n"
            "‚Ä¢ –í—ã –º–æ–∂–µ—Ç–µ –≤–≤–µ—Å—Ç–∏ ID –∫–∞–Ω–∞–ª–∞ (–Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å -100...)\n"
            "‚Ä¢ –ò–ª–∏ username –∫–∞–Ω–∞–ª–∞ (–±–µ–∑ @)\n\n"
            "–ë–æ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –≤ –∫–∞–Ω–∞–ª–µ.",
            reply_markup=kb.as_markup()
        )
        await callback.answer()

    async def add_channel_input(self, callback: types.CallbackQuery):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ ID/username –∫–∞–Ω–∞–ª–∞"""
        if not self.is_admin(callback.from_user.id):
            return
        
        self.awaiting_channel_input = callback.from_user.id
        
        kb = InlineKeyboardBuilder()
        kb.button(text="–û—Ç–º–µ–Ω–∞", callback_data="channels")
        
        await callback.message.edit_text(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ ID –∫–∞–Ω–∞–ª–∞ –∏–ª–∏ username –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è:\n\n"
            "‚Ä¢ –î–ª—è –ø—É–±–ª–∏—á–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤: –≤–≤–µ–¥–∏—Ç–µ username –±–µ–∑ @\n"
            "‚Ä¢ –î–ª—è –ø—Ä–∏–≤–∞—Ç–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤: –≤–≤–µ–¥–∏—Ç–µ ID –∫–∞–Ω–∞–ª–∞ (–Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å -100...)\n\n"
            "–û—Ç–ø—Ä–∞–≤—å—Ç–µ ID/username —Å–æ–æ–±—â–µ–Ω–∏–µ–º üí¨",
            reply_markup=kb.as_markup()
        )
        await callback.answer()

    async def add_channel_submit(self, message: types.Message):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –ø—Ä—è–º—ã–º –≤–≤–æ–¥–æ–º –∫–∞–Ω–∞–ª–∞"""
        if not self.is_admin(message.from_user.id):
            return
        
        channel = message.text.strip()
        
        if not channel:
            await message.reply("‚ö†Ô∏è ID/username –∫–∞–Ω–∞–ª–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º")
            return
        
        self.awaiting_channel_input = None
        
        progress_msg = await message.reply("üîÑ –ü—Ä–æ–≤–µ—Ä—è—é –¥–æ—Å—Ç—É–ø –∫ –∫–∞–Ω–∞–ª—É...")
        
        try:
            chat = await self.bot.get_chat(channel)
            
            bot_id = (await self.bot.get_me()).id
            member = await self.bot.get_chat_member(chat.id, bot_id)
            
            if member.status != "administrator":
                kb = InlineKeyboardBuilder()
                kb.button(text="–ù–∞–∑–∞–¥ –∫ –∫–∞–Ω–∞–ª–∞–º", callback_data="channels")
                
                await progress_msg.edit_text(
                    "‚ö†Ô∏è –ë–æ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –∫–∞–Ω–∞–ª–∞.\n"
                    "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –¥–æ–±–∞–≤—å—Ç–µ –±–æ—Ç–∞ –∫–∞–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
                    reply_markup=kb.as_markup()
                )
                return
            
            if self.config.add_source_channel(str(chat.id)):
                await progress_msg.edit_text(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω –∫–∞–Ω–∞–ª: {chat.title} ({chat.id})\n\nüîç –¢–µ–ø–µ—Ä—å –∏—â—É –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ...")
                
                try:
                    latest_id = await self.find_latest_message(str(chat.id))
                    
                    if latest_id:
                        await Repository.save_last_message(str(chat.id), latest_id)
                        
                        kb = InlineKeyboardBuilder()
                        kb.button(text="–ù–∞–∑–∞–¥ –∫ –∫–∞–Ω–∞–ª–∞–º", callback_data="channels")
                        
                        await progress_msg.edit_text(
                            f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω –∫–∞–Ω–∞–ª: {chat.title} ({chat.id})\n"
                            f"‚úÖ –ù–∞–π–¥–µ–Ω–æ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (ID: {latest_id})",
                            reply_markup=kb.as_markup()
                        )
                    else:
                        kb = InlineKeyboardBuilder()
                        kb.button(text="–ù–∞–∑–∞–¥ –∫ –∫–∞–Ω–∞–ª–∞–º", callback_data="channels")
                        
                        await progress_msg.edit_text(
                            f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω –∫–∞–Ω–∞–ª: {chat.title} ({chat.id})\n"
                            f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –≤–∞–ª–∏–¥–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è. –ë—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è —Å–ª–µ–¥—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∫–∞–Ω–∞–ª–µ.",
                            reply_markup=kb.as_markup()
                        )
                except Exception as e:
                    logger.error(f"Error finding latest message: {e}")
                    
                    kb = InlineKeyboardBuilder()
                    kb.button(text="–ù–∞–∑–∞–¥ –∫ –∫–∞–Ω–∞–ª–∞–º", callback_data="channels")
                    
                    await progress_msg.edit_text(
                        f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω –∫–∞–Ω–∞–ª: {chat.title} ({chat.id})\n"
                        f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è.",
                        reply_markup=kb.as_markup()
                    )
            else:
                kb = InlineKeyboardBuilder()
                kb.button(text="–ù–∞–∑–∞–¥ –∫ –∫–∞–Ω–∞–ª–∞–º", callback_data="channels")
                
                await progress_msg.edit_text(
                    f"‚ö†Ô∏è –ö–∞–Ω–∞–ª {chat.title} —É–∂–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω.",
                    reply_markup=kb.as_markup()
                )
        except Exception as e:
            kb = InlineKeyboardBuilder()
            kb.button(text="–ù–∞–∑–∞–¥ –∫ –∫–∞–Ω–∞–ª–∞–º", callback_data="channels")
            
            await progress_msg.edit_text(
                f"‚ùå –û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –∫–∞–Ω–∞–ª—É: {e}\n\n"
                "–£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ:\n"
                "‚Ä¢ ID/username –∫–∞–Ω–∞–ª–∞ —É–∫–∞–∑–∞–Ω –ø—Ä–∞–≤–∏–ª—å–Ω–æ\n"
                "‚Ä¢ –ë–æ—Ç —è–≤–ª—è–µ—Ç—Å—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–º –∫–∞–Ω–∞–ª–∞\n"
                "‚Ä¢ –ë–æ—Ç —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –∫–∞–Ω–∞–ª–∞",
                reply_markup=kb.as_markup()
            )
            logger.error(f"Failed to add channel {channel}: {e}")

    async def remove_chat(self, callback: types.CallbackQuery):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É–¥–∞–ª–µ–Ω–∏—è —á–∞—Ç–∞"""
        if not self.is_admin(callback.from_user.id):
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ —É–¥–∞–ª–µ–Ω–∏–µ —á–∞—Ç–∞, –∞ –Ω–µ –∫–∞–Ω–∞–ª–∞
        if not callback.data.startswith("remove_") or callback.data.startswith("remove_channel_"):
            await callback.answer("–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —á–∞—Ç–æ–≤")
            return
        
        try:
            chat_id = int(callback.data.split("_")[1])
            
            # –ü–µ—Ä–µ–¥ —É–¥–∞–ª–µ–Ω–∏–µ–º –ø—Ä–æ–±—É–µ–º –æ—Ç–∫—Ä–µ–ø–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ, –µ—Å–ª–∏ –æ–Ω–æ –µ—Å—Ç—å
            try:
                pinned_message_id = await Repository.get_pinned_message(str(chat_id))
                if pinned_message_id:
                    try:
                        await self.bot.unpin_chat_message(
                            chat_id=chat_id,
                            message_id=pinned_message_id
                        )
                    except Exception as e:
                        logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä–µ–ø–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ {pinned_message_id} –≤ —á–∞—Ç–µ {chat_id}: {e}")
            except Exception as e:
                logger.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —á–∞—Ç–∞ {chat_id}: {e}")
            
            await Repository.remove_target_chat(chat_id)
            await Repository.delete_pinned_message(str(chat_id))
            self.cache_service.remove_from_cache(chat_id)
            
            # –£–¥–∞–ª—è–µ–º –∑–∞–ø–∏—Å—å –∏–∑ —Å–ª–æ–≤–∞—Ä—è –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
            if str(chat_id) in self.pinned_messages:
                del self.pinned_messages[str(chat_id)]
            
            await self.list_chats(callback)
            await callback.answer("–ß–∞—Ç —É–¥–∞–ª–µ–Ω!")
        except ValueError:
            await callback.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —á–∞—Ç–∞")
            logger.error(f"Invalid chat_id in callback data: {callback.data}")

    async def list_chats(self, callback: types.CallbackQuery):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–ø–∏—Å–∫–∞ —á–∞—Ç–æ–≤"""
        if not self.is_admin(callback.from_user.id):
            return
        
        chats = await Repository.get_target_chats()
        chat_info = {}
        
        for chat_id in chats:
            info = await self.cache_service.get_chat_info(self.bot, chat_id)
            if info:
                chat_info[chat_id] = info.title
        
        if not chats:
            text = (
                "–ù–µ—Ç –Ω–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã—Ö —Ü–µ–ª–µ–≤—ã—Ö —á–∞—Ç–æ–≤.\n"
                "–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ:\n"
                "1. –ë–æ—Ç –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Ü–µ–ª–µ–≤—ã–µ —á–∞—Ç—ã\n"
                "2. –ë–æ—Ç —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –≤ –∏—Å—Ö–æ–¥–Ω—ã—Ö –∫–∞–Ω–∞–ª–∞—Ö"
            )
            markup = KeyboardFactory.create_main_keyboard(
                isinstance(self.context.state, RunningState),
            )
        else:
            text = "üì° –¶–µ–ª–µ–≤—ã–µ —á–∞—Ç—ã:\n\n"
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö
            pinned_messages = await Repository.get_all_pinned_messages()
            
            for chat_id, title in chat_info.items():
                has_pinned = str(chat_id) in pinned_messages
                pin_status = "üìå" if has_pinned else "üî¥"
                text += f"{pin_status} {title} ({chat_id})\n"
                
            text += "\nüìå - –µ—Å—Ç—å –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ\nüî¥ - –Ω–µ—Ç –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è"
            
            markup = KeyboardFactory.create_chat_list_keyboard(chat_info)
        
        await callback.message.edit_text(text, reply_markup=markup)
        await callback.answer()

    async def main_menu(self, callback: types.CallbackQuery):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é"""
        if not self.is_admin(callback.from_user.id):
            return
        
        await callback.message.edit_text(
            "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:",
            reply_markup=KeyboardFactory.create_main_keyboard(
                isinstance(self.context.state, RunningState),
            )
        )
        await callback.answer()

    async def manage_channels(self, callback: types.CallbackQuery):
        """–ú–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–∞–Ω–∞–ª–∞–º–∏"""
        if not self.is_admin(callback.from_user.id):
            return
                
        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤–≤–æ–¥–∞ –∫–∞–Ω–∞–ª–∞
        self.awaiting_channel_input = None
        
        source_channels = self.config.source_channels
        
        if not source_channels:
            text = (
                "–ù–µ—Ç –Ω–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã—Ö –∏—Å—Ö–æ–¥–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤.\n"
                "–î–æ–±–∞–≤—å—Ç–µ –∫–∞–Ω–∞–ª, –Ω–∞–∂–∞–≤ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ."
            )
        else:
            text = "üì° –ò—Å—Ö–æ–¥–Ω—ã–µ –∫–∞–Ω–∞–ª—ã:\n\n"
            
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∫–∞–Ω–∞–ª–∞
            last_messages = await Repository.get_all_last_messages()
            
            for channel in source_channels:
                # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–Ω–∞–ª–µ –¥–ª—è –ª—É—á—à–µ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
                try:
                    chat = await self.bot.get_chat(channel)
                    channel_title = chat.title or channel
                    
                    # –ü–æ–ª—É—á–∞–µ–º ID –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è, –µ—Å–ª–∏ –æ–Ω–æ –µ—Å—Ç—å
                    last_msg = "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö"
                    if channel in last_messages:
                        last_msg = f"ID: {last_messages[channel]['message_id']}"
                        
                    text += f"‚Ä¢ {channel_title} ({channel})\n  –ü–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: {last_msg}\n\n"
                except Exception:
                    # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é, –ø—Ä–æ—Å—Ç–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º ID
                    last_msg = "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö"
                    if channel in last_messages:
                        last_msg = f"ID: {last_messages[channel]['message_id']}"
                        
                    text += f"‚Ä¢ {channel}\n  –ü–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: {last_msg}\n\n"
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º KeyboardFactory –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        markup = KeyboardFactory.create_channel_management_keyboard(source_channels)
        
        await callback.message.edit_text(text, reply_markup=markup)
        await callback.answer()

    async def remove_channel(self, callback: types.CallbackQuery):
        """–£–¥–∞–ª–µ–Ω–∏–µ –∏—Å—Ö–æ–¥–Ω–æ–≥–æ –∫–∞–Ω–∞–ª–∞"""
        if not self.is_admin(callback.from_user.id):
            return
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º ID –∫–∞–Ω–∞–ª–∞ –∏–∑ –¥–∞–Ω–Ω—ã—Ö callback
        if not callback.data.startswith("remove_channel_"):
            await callback.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö")
            return
        
        channel = callback.data.replace("remove_channel_", "")
        
        if self.config.remove_source_channel(channel):
            await callback.answer("–ö–∞–Ω–∞–ª —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω")
        else:
            await callback.answer("–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –∫–∞–Ω–∞–ª")
        
        await self.manage_channels(callback)

    async def handle_channel_post(self, message: types.Message | None):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –∫–∞–Ω–∞–ª–∞—Ö"""
        if message is None:
            return
            
        chat_id = str(message.chat.id)
        username = getattr(message.chat, 'username', None)
        source_channels = self.config.source_channels
            
        is_source = False
        for channel in source_channels:
            if channel == chat_id or (username and channel.lower() == username.lower()):
                is_source = True
                break
                
        if not is_source:
            logger.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –∏–∑ –∫–∞–Ω–∞–ª–∞-–∏—Å—Ç–æ—á–Ω–∏–∫–∞: {chat_id}/{username}")
            return
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        await Repository.save_last_message(chat_id, message.message_id)
        
        if isinstance(self.context.state, RunningState) and self.context.state.auto_forward:
            # –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –∑–∞–∫—Ä–µ–ø–ª—è–µ–º –µ–≥–æ
            await self.context.forward_and_pin_message(chat_id, message.message_id)
            logger.info(f"–ü–µ—Ä–µ—Å–ª–∞–Ω–æ –∏ –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ {message.message_id} –∏–∑ –∫–∞–Ω–∞–ª–∞ {chat_id}")
        else:
            logger.info(f"–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ {message.message_id} –∏–∑ –∫–∞–Ω–∞–ª–∞ {chat_id} (–±–µ–∑ –∞–≤—Ç–æ–ø–µ—Ä–µ—Å—ã–ª–∫–∏)")

    async def handle_chat_member(self, update: types.ChatMemberUpdated):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è/—É–¥–∞–ª–µ–Ω–∏—è –±–æ—Ç–∞ –∏–∑ —á–∞—Ç–æ–≤"""
        if update.new_chat_member.user.id != self.bot.id:
            return

        chat_id = update.chat.id
        is_member = update.new_chat_member.status in ['member', 'administrator']
        
        if is_member and update.chat.type in ['group', 'supergroup']:
            await Repository.add_target_chat(chat_id)
            self.cache_service.remove_from_cache(chat_id)
            await self._notify_admins(f"–ë–æ—Ç –¥–æ–±–∞–≤–ª–µ–Ω –≤ {update.chat.type}: {update.chat.title} ({chat_id})")
            logger.info(f"–ë–æ—Ç –¥–æ–±–∞–≤–ª–µ–Ω –≤ {update.chat.type}: {update.chat.title} ({chat_id})")
        elif not is_member:
            # –ï—Å–ª–∏ –±–æ—Ç–∞ —É–¥–∞–ª–∏–ª–∏ –∏–∑ —á–∞—Ç–∞, —É–¥–∞–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏
            await Repository.delete_pinned_message(str(chat_id))
            if str(chat_id) in self.pinned_messages:
                del self.pinned_messages[str(chat_id)]
                
            await Repository.remove_target_chat(chat_id)
            self.cache_service.remove_from_cache(chat_id)
            await self._notify_admins(f"–ë–æ—Ç —É–¥–∞–ª–µ–Ω –∏–∑ —á–∞—Ç–∞ {chat_id}")
            logger.info(f"–ë–æ—Ç —É–¥–∞–ª–µ–Ω –∏–∑ —á–∞—Ç–∞ {chat_id}")

    async def _notify_owner(self, message: str):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤–ª–∞–¥–µ–ª—å—Ü—É –±–æ—Ç–∞ (–¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)"""
        try:
            await self.bot.send_message(self.config.owner_id, message)
        except Exception as e:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –≤–ª–∞–¥–µ–ª—å—Ü–∞: {e}")
            
    async def _notify_admins(self, message: str):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤—Å–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º –±–æ—Ç–∞"""
        for admin_id in self.config.admin_ids:
            try:
                await self.bot.send_message(admin_id, message)
            except Exception as e:
                logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ {admin_id}: {e}")

    async def on_cache_update(self, chat_id: int, info: ChatInfo):
        """–†–µ–∞–ª–∏–∑–∞—Ü–∏—è –º–µ—Ç–æ–¥–∞ –∏–∑ –ø—Ä–æ—Ç–æ–∫–æ–ª–∞ CacheObserver"""
        # –í —ç—Ç–æ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –º—ã –Ω–µ –¥–µ–ª–∞–µ–º –Ω–∏—á–µ–≥–æ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∫—ç—à–∞
        pass

    async def start(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
        await Repository.init_db()
        
        # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        pinned_messages = await Repository.get_all_pinned_messages()
        self.pinned_messages = pinned_messages
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é, –µ—Å–ª–∏ –Ω–µ –∑–∞–¥–∞–Ω
        if not await Repository.get_config("rotation_interval"):
            await Repository.set_config("rotation_interval", "7200")  # 2 —á–∞—Å–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        
        logger.info("–ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω!")
        try:
            # –ü–æ–ª—É—á–∞–µ–º ID –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –¥—É–±–ª–∏–∫–∞—Ç–æ–≤
            offset = 0
            try:
                updates = await self.bot.get_updates(limit=1, timeout=1)
                if updates:
                    offset = updates[-1].update_id + 1
            except Exception as e:
                logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –Ω–∞—á–∞–ª—å–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {e}")

            await self.dp.start_polling(self.bot, offset=offset)
        finally:
            self.cache_service.remove_observer(self)
            await self.bot.session.close()

# –û–±–Ω–æ–≤–ª—è–µ–º –∫–ª–∞—Å—Å KeyboardFactory –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –Ω–æ–≤—ã–º —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–æ–º
class KeyboardFactory:
    """–†–µ–∞–ª–∏–∑–∞—Ü–∏—è –ø–∞—Ç—Ç–µ—Ä–Ω–∞ Factory –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä"""
    
    @staticmethod
    def create_main_keyboard(running: bool = False) -> Any:
        """–°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é"""
        kb = InlineKeyboardBuilder()
        kb.button(
            text="üîÑ –ó–∞–ø—É—Å—Ç–∏—Ç—å —Ä–æ—Ç–∞—Ü–∏—é" if not running else "‚èπ –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ä–æ—Ç–∞—Ü–∏—é",
            callback_data="toggle_forward"
        )
        kb.button(text="‚è±Ô∏è –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∏–Ω—Ç–µ—Ä–≤–∞–ª", callback_data="set_interval")
        kb.button(text="‚öôÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–∞–º–∏", callback_data="channels")
        kb.button(text="üí¨ –°–ø–∏—Å–æ–∫ —Ü–µ–ª–µ–≤—ã—Ö —á–∞—Ç–æ–≤", callback_data="list_chats")
        kb.button(text="üìå –ù–µ–º–µ–¥–ª–µ–Ω–Ω–∞—è –ø–µ—Ä–µ—Å—ã–ª–∫–∞", callback_data="forward_now")
        kb.adjust(2)
        return kb.as_markup()

    @staticmethod
    def create_rotation_interval_keyboard() -> Any:
        """–°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –≤—ã–±–æ—Ä–∞ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ —Ä–æ—Ç–∞—Ü–∏–∏"""
        kb = InlineKeyboardBuilder()
        intervals = [
            ("30–º", 1800), ("1—á", 3600), ("2—á", 7200), 
            ("3—á", 10800), ("6—á", 21600), ("12—á", 43200), 
            ("24—á", 86400)
        ]
        for label, seconds in intervals:
            kb.button(text=label, callback_data=f"set_interval_value_{seconds}")
        kb.button(text="–î—Ä—É–≥–æ–π...", callback_data="set_interval_value_custom")
        kb.button(text="–ù–∞–∑–∞–¥", callback_data="back_to_main")
        kb.adjust(4)
        return kb.as_markup()

    @staticmethod
    def create_chat_list_keyboard(chats: Dict[int, str]) -> Any:
        """–°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å–ø–∏—Å–∫–∞ —á–∞—Ç–æ–≤ —Å –∫–Ω–æ–ø–∫–∞–º–∏ —É–¥–∞–ª–µ–Ω–∏—è –∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–∏—è"""
        kb = InlineKeyboardBuilder()
        for chat_id, title in chats.items():
            kb.button(
                text=f"üìå –¢–µ—Å—Ç –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–∏—è –≤ {title}",
                callback_data=f"test_pin_{chat_id}"
            )
            kb.button(
                text=f"‚ùå –£–¥–∞–ª–∏—Ç—å {title}",
                callback_data=f"remove_{chat_id}"
            )
        kb.button(text="–ù–∞–∑–∞–¥", callback_data="back_to_main")
        kb.adjust(1)
        return kb.as_markup()

    @staticmethod
    def create_channel_management_keyboard(channels: List[str]) -> Any:
        """–°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–∞–Ω–∞–ª–∞–º–∏"""
        kb = InlineKeyboardBuilder()
        kb.button(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –∫–∞–Ω–∞–ª", callback_data="add_channel")
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∫–∞–Ω–∞–ª–∞
        for channel in channels:
            # –û–±—Ä–µ–∑–∞–µ–º –∏–º—è –∫–∞–Ω–∞–ª–∞, –µ—Å–ª–∏ –æ–Ω–æ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ
            display_name = channel[:15] + "..." if len(channel) > 18 else channel
            
            # –ö–Ω–æ–ø–∫–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∫–∞–Ω–∞–ª–æ–≤
            kb.button(
                text=f"‚ùå –£–¥–∞–ª–∏—Ç—å ({display_name})",
                callback_data=f"remove_channel_{channel}"
            )
        
        kb.button(text="–ù–∞–∑–∞–¥", callback_data="back_to_main")
        kb.adjust(1)
        return kb.as_markup()

# –û–±–Ω–æ–≤–ª—è–µ–º –∫–ª–∞—Å—Å BotContext –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ä–æ—Ç–∞—Ü–∏–µ–π –∏ –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–∏–µ–º
class BotContext:
    """–ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–π –∫–ª–∞—Å—Å, —É–ø—Ä–∞–≤–ª—è—é—â–∏–π —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º –±–æ—Ç–∞"""
    
    def __init__(self, bot, config):
        self.bot = bot
        self.config = config
        self.state: BotState = IdleState(self)
    
    async def start(self) -> None:
        await self.state.start()
    
    async def stop(self) -> None:
        await self.state.stop()
    
    async def forward_and_pin_message(self, channel_id: str, message_id: int) -> bool:
        """–ü–µ—Ä–µ—Å—ã–ª–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤–æ –≤—Å–µ —Ü–µ–ª–µ–≤—ã–µ —á–∞—Ç—ã –∏ –∑–∞–∫—Ä–µ–ø–ª—è–µ—Ç –µ–≥–æ"""
        success = False
        target_chats = await Repository.get_target_chats()
        
        if not target_chats:
            logger.warning("–ù–µ—Ç —Ü–µ–ª–µ–≤—ã—Ö —á–∞—Ç–æ–≤ –¥–ª—è –ø–µ—Ä–µ—Å—ã–ª–∫–∏")
            return False

        for chat_id in target_chats:
            if str(chat_id) == channel_id:
                logger.info(f"–ü—Ä–æ–ø—É—Å–∫–∞—é –ø–µ—Ä–µ—Å—ã–ª–∫—É –≤ –∏—Å—Ö–æ–¥–Ω—ã–π –∫–∞–Ω–∞–ª {chat_id}")
                continue
                
            try:
                chat_info = await self.bot.get_chat(chat_id)
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –Ω–µ –∫–∞–Ω–∞–ª (–≤ –∫–∞–Ω–∞–ª–∞—Ö –Ω–µ–ª—å–∑—è –∑–∞–∫—Ä–µ–ø–ª—è—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è —Å –ø–æ–º–æ—â—å—é –±–æ—Ç–∞)
                if chat_info.type == 'channel':
                    logger.info(f"–ü—Ä–æ–ø—É—Å–∫–∞—é –ø–µ—Ä–µ—Å—ã–ª–∫—É –≤ –∫–∞–Ω–∞–ª {chat_id} (–Ω–µ–ª—å–∑—è –∑–∞–∫—Ä–µ–ø–ª—è—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –∫–∞–Ω–∞–ª–∞—Ö)")
                    continue
                
                # –ü–µ—Ä–µ—Å—ã–ª–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
                forwarded_message = await self.bot.forward_message(
                    chat_id=chat_id,
                    from_chat_id=channel_id,
                    message_id=message_id
                )
                
                # –û—Ç–∫—Ä–µ–ø–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –µ—Å–ª–∏ –æ–Ω–æ –µ—Å—Ç—å
                old_pinned_id = await Repository.get_pinned_message(str(chat_id))
                if old_pinned_id:
                    try:
                        await self.bot.unpin_chat_message(
                            chat_id=chat_id,
                            message_id=old_pinned_id
                        )
                        logger.info(f"–û—Ç–∫—Ä–µ–ø–ª–µ–Ω–æ –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ {old_pinned_id} –≤ —á–∞—Ç–µ {chat_id}")
                    except Exception as e:
                        logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä–µ–ø–∏—Ç—å –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ {old_pinned_id} –≤ —á–∞—Ç–µ {chat_id}: {e}")
                
                # –ó–∞–∫—Ä–µ–ø–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                await self.bot.pin_chat_message(
                    chat_id=chat_id,
                    message_id=forwarded_message.message_id,
                    disable_notification=True
                )
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
                await Repository.save_pinned_message(str(chat_id), forwarded_message.message_id)
                
                await Repository.log_forward(message_id)
                success = True
                logger.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ {message_id} –ø–µ—Ä–µ—Å–ª–∞–Ω–æ –∏ –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–æ –≤ —á–∞—Ç–µ {chat_id}")
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ—Å—ã–ª–∫–µ/–∑–∞–∫—Ä–µ–ø–ª–µ–Ω–∏–∏ –≤ {chat_id}: {e}")

        return success

    async def forward_latest_messages(self) -> bool:
        """–ü–µ—Ä–µ—Å—ã–ª–∞–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ –≤—Å–µ—Ö –∫–∞–Ω–∞–ª–æ–≤"""
        success = False
        source_channels = self.config.source_channels
        
        if not source_channels:
            logger.warning("–ù–µ—Ç –Ω–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã—Ö –∏—Å—Ö–æ–¥–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤")
            return False
        
        logger.info(f"–ù–∞–π–¥–µ–Ω–æ {len(source_channels)} –∏—Å—Ö–æ–¥–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ü–µ–ª–µ–≤—ã—Ö —á–∞—Ç–æ–≤
        target_chats = await Repository.get_target_chats()
        if not target_chats:
            logger.warning("–ù–µ—Ç —Ü–µ–ª–µ–≤—ã—Ö —á–∞—Ç–æ–≤ –¥–ª—è –ø–µ—Ä–µ—Å—ã–ª–∫–∏. –ë–æ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω –≤ –≥—Ä—É–ø–ø—ã/—Å—É–ø–µ—Ä–≥—Ä—É–ø–ø—ã.")
            return False
        
        logger.info(f"–ù–∞–π–¥–µ–Ω–æ {len(target_chats)} —Ü–µ–ª–µ–≤—ã—Ö —á–∞—Ç–æ–≤")
        
        for channel_id in source_channels:
            # –ü–æ–ª—É—á–∞–µ–º ID –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
            message_id = await Repository.get_last_message(channel_id)
            
            if not message_id:
                logger.warning(f"–ù–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∫–∞–Ω–∞–ª–∞ {channel_id}")
                continue
            
            logger.info(f"–ù–∞–π–¥–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ {message_id} –¥–ª—è –∫–∞–Ω–∞–ª–∞ {channel_id}")
            
            # –ü–µ—Ä–µ—Å—ã–ª–∞–µ–º –∏ –∑–∞–∫—Ä–µ–ø–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            result = await self.forward_and_pin_message(channel_id, message_id)
            success = success or result
            
            if result:
                logger.info(f"–£—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ—Å–ª–∞–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ {message_id} –∏–∑ –∫–∞–Ω–∞–ª–∞ {channel_id}")
            else:
                logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ—Å–ª–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ {message_id} –∏–∑ –∫–∞–Ω–∞–ª–∞ {channel_id}")
        
        return success
            
    async def _notify_admins(self, message: str):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤—Å–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º –±–æ—Ç–∞"""
        for admin_id in self.config.admin_ids:
            try:
                await self.bot.send_message(admin_id, message)
            except Exception as e:
                logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ {admin_id}: {e}")

# –û–±–Ω–æ–≤–ª—è–µ–º –∫–ª–∞—Å—Å BotState –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–æ—Ç–∞—Ü–∏–µ–π –∫–∞–Ω–∞–ª–æ–≤
class BotState(ABC):
    """–ê–±—Å—Ç—Ä–∞–∫—Ç–Ω—ã–π –±–∞–∑–æ–≤—ã–π –∫–ª–∞—Å—Å –¥–ª—è —Å–æ—Å—Ç–æ—è–Ω–∏–π –±–æ—Ç–∞"""
    
    @abstractmethod
    async def start(self) -> None:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–µ–π—Å—Ç–≤–∏—è –∑–∞–ø—É—Å–∫–∞"""
        pass
    
    @abstractmethod
    async def stop(self) -> None:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–µ–π—Å—Ç–≤–∏—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏"""
        pass

class IdleState(BotState):
    """–°–æ—Å—Ç–æ—è–Ω–∏–µ, –∫–æ–≥–¥–∞ –±–æ—Ç –Ω–µ –ø–µ—Ä–µ—Å—ã–ª–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è"""
    
    def __init__(self, bot_context):
        self.context = bot_context
    
    async def start(self) -> None:
        interval = int(await Repository.get_config("rotation_interval", "7200"))
        self.context.state = RunningState(self.context, interval)
        await self.context._notify_admins("–ë–æ—Ç –Ω–∞—á–∞–ª —Ä–æ—Ç–∞—Ü–∏—é –∫–∞–Ω–∞–ª–æ–≤")
    
    async def stop(self) -> None:
        # –£–∂–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω
        pass

class RunningState(BotState):
    """–°–æ—Å—Ç–æ—è–Ω–∏–µ, –∫–æ–≥–¥–∞ –±–æ—Ç –∞–∫—Ç–∏–≤–Ω–æ –ø–µ—Ä–µ—Å—ã–ª–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è"""
    
    def __init__(self, bot_context, interval: int):
        self.context = bot_context
        self.interval = interval  # –ò–Ω—Ç–µ—Ä–≤–∞–ª —Ä–æ—Ç–∞—Ü–∏–∏ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
        self._rotation_task: Optional[asyncio.Task] = None
        self.auto_forward = True  # –í—Å–µ–≥–¥–∞ –≤–∫–ª—é—á–µ–Ω–æ –≤ —ç—Ç–æ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏
        
        # –î–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–≥–æ –∫–∞–Ω–∞–ª–∞
        self._last_processed_channel_index = -1
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –∑–∞–¥–∞—á—É —Ä–æ—Ç–∞—Ü–∏–∏
        self._start_rotation_task()
        
    def _start_rotation_task(self):
        """–ó–∞–ø—É—Å–∫ –∑–∞–¥–∞—á–∏ —Ä–æ—Ç–∞—Ü–∏–∏ –∫–∞–Ω–∞–ª–æ–≤"""
        if not self._rotation_task or self._rotation_task.done():
            self._rotation_task = asyncio.create_task(self._channel_rotation())
            
    def update_interval(self, new_interval: int):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ —Ä–æ—Ç–∞—Ü–∏–∏"""
        logger.info(f"–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ —Ä–æ—Ç–∞—Ü–∏–∏ —Å {self.interval} –Ω–∞ {new_interval} —Å–µ–∫—É–Ω–¥")
        self.interval = new_interval
        
        # –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º –∑–∞–¥–∞—á—É —Å –Ω–æ–≤—ã–º –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–º
        if self._rotation_task and not self._rotation_task.done():
            logger.info("–û—Ç–º–µ–Ω–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –∑–∞–¥–∞—á–∏ —Ä–æ—Ç–∞—Ü–∏–∏")
            self._rotation_task.cancel()
        else:
            logger.info("–ü—Ä–µ–¥—ã–¥—É—â–∞—è –∑–∞–¥–∞—á–∞ —Ä–æ—Ç–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ —É–∂–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
        
        logger.info("–ó–∞–ø—É—Å–∫ –Ω–æ–≤–æ–π –∑–∞–¥–∞—á–∏ —Ä–æ—Ç–∞—Ü–∏–∏")
        self._start_rotation_task()
    
    async def start(self) -> None:
        # –£–∂–µ –∑–∞–ø—É—â–µ–Ω
        pass
    
    async def stop(self) -> None:
        if self._rotation_task and not self._rotation_task.done():
            self._rotation_task.cancel()
        
        self.context.state = IdleState(self.context)
        await self.context._notify_admins("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–∏–ª —Ä–æ—Ç–∞—Ü–∏—é –∫–∞–Ω–∞–ª–æ–≤")
    
    async def _channel_rotation(self):
        """–ó–∞–¥–∞—á–∞ —Ä–æ—Ç–∞—Ü–∏–∏ –∫–∞–Ω–∞–ª–æ–≤ –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é"""
        try:
            logger.info("–ó–∞–ø—É—â–µ–Ω–∞ –∑–∞–¥–∞—á–∞ —Ä–æ—Ç–∞—Ü–∏–∏ –∫–∞–Ω–∞–ª–æ–≤")
            
            # –ù–∞—á–∏–Ω–∞–µ–º —Å –ø–µ—Ä–µ—Å—ã–ª–∫–∏ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ –≤—Å–µ—Ö –∫–∞–Ω–∞–ª–æ–≤
            success = await self.context.forward_latest_messages()
            logger.info(f"–ù–∞—á–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ—Å—ã–ª–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π - —É—Å–ø–µ—à–Ω–æ: {success}")
            
            while True:
                # –í—ã–≤–æ–¥–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –æ–∂–∏–¥–∞–Ω–∏—è
                logger.info(f"–û–∂–∏–¥–∞–Ω–∏–µ {self.interval} —Å–µ–∫—É–Ω–¥ –¥–æ —Å–ª–µ–¥—É—é—â–µ–π —Ä–æ—Ç–∞—Ü–∏–∏")
                
                # –ñ–¥–µ–º —É–∫–∞–∑–∞–Ω–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª
                await asyncio.sleep(self.interval)
                
                # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤
                source_channels = self.context.config.source_channels
                
                if not source_channels:
                    logger.warning("–ù–µ—Ç –Ω–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã—Ö –∏—Å—Ö–æ–¥–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤ –¥–ª—è —Ä–æ—Ç–∞—Ü–∏–∏")
                    continue
                    
                logger.info(f"–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–∞–Ω–∞–ª—ã: {source_channels}")
                
                # –í—ã–±–∏—Ä–∞–µ–º —Å–ª–µ–¥—É—é—â–∏–π –∫–∞–Ω–∞–ª –ø–æ –∫—Ä—É–≥—É
                self._last_processed_channel_index = (self._last_processed_channel_index + 1) % len(source_channels)
                channel_id = source_channels[self._last_processed_channel_index]
                
                logger.info(f"–í—ã–±—Ä–∞–Ω –∫–∞–Ω–∞–ª –¥–ª—è —Ä–æ—Ç–∞—Ü–∏–∏: {channel_id} (–∏–Ω–¥–µ–∫—Å: {self._last_processed_channel_index})")
                
                # –ü–æ–ª—É—á–∞–µ–º ID –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —ç—Ç–æ–º –∫–∞–Ω–∞–ª–µ
                message_id = await Repository.get_last_message(channel_id)
                
                if not message_id:
                    logger.warning(f"–ù–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∫–∞–Ω–∞–ª–∞ {channel_id}")
                    continue
                    
                logger.info(f"–ù–∞–π–¥–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø–µ—Ä–µ—Å—ã–ª–∫–∏: {message_id}")
                
                # –ü–µ—Ä–µ—Å—ã–ª–∞–µ–º –∏ –∑–∞–∫—Ä–µ–ø–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
                success = await self.context.forward_and_pin_message(channel_id, message_id)
                
                if success:
                    logger.info(f"–£—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ—Å–ª–∞–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –∫–∞–Ω–∞–ª–∞ {channel_id}")
                    logger.info(f"–°–ª–µ–¥—É—é—â–∞—è —Ä–æ—Ç–∞—Ü–∏—è —á–µ—Ä–µ–∑ {self.interval // 60} –º–∏–Ω—É—Ç")
                else:
                    logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ—Å–ª–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –∫–∞–Ω–∞–ª–∞ {channel_id}")
                    
        except asyncio.CancelledError:
            logger.info("–ó–∞–¥–∞—á–∞ —Ä–æ—Ç–∞—Ü–∏–∏ –∫–∞–Ω–∞–ª–æ–≤ –æ—Ç–º–µ–Ω–µ–Ω–∞")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ –∑–∞–¥–∞—á–µ —Ä–æ—Ç–∞—Ü–∏–∏ –∫–∞–Ω–∞–ª–æ–≤: {e}")
            # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª–Ω—ã–π traceback –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
            import traceback
            logger.error(f"Traceback: {traceback.format_exc()}")
            
            # –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º –∑–∞–¥–∞—á—É –≤ —Å–ª—É—á–∞–µ –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–æ–π –æ—à–∏–±–∫–∏
            await asyncio.sleep(10)
            self._start_rotation_task()

# –û–±–Ω–æ–≤–ª—è–µ–º –∫–ª–∞—Å—Å Repository –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–Ω—ã–º–∏ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
class Repository:
    """–†–µ–∞–ª–∏–∑–∞—Ü–∏—è –ø–∞—Ç—Ç–µ—Ä–Ω–∞ Repository –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö"""
    
    @staticmethod
    async def close_db() -> None:
        """–ó–∞–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö"""
        await DatabaseConnectionPool.close_all()
    
    @staticmethod
    async def init_db() -> None:
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å—Ö–µ–º—ã –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
        async with DatabaseConnectionPool.get_connection() as db:
            await db.executescript("""
                CREATE TABLE IF NOT EXISTS config (
                    key TEXT PRIMARY KEY,
                    value TEXT
                );
                CREATE TABLE IF NOT EXISTS target_chats (
                    chat_id INTEGER PRIMARY KEY,
                    added_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
                );
                CREATE TABLE IF NOT EXISTS forward_stats (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    message_id INTEGER,
                    timestamp TIMESTAMP DEFAULT CURRENT_TIMESTAMP
                );
                CREATE TABLE IF NOT EXISTS last_messages (
                    channel_id TEXT PRIMARY KEY,
                    message_id INTEGER,
                    timestamp TIMESTAMP DEFAULT CURRENT_TIMESTAMP
                );
                CREATE TABLE IF NOT EXISTS pinned_messages (
                    chat_id TEXT PRIMARY KEY,
                    message_id INTEGER,
                    timestamp TIMESTAMP DEFAULT CURRENT_TIMESTAMP
                );
                CREATE INDEX IF NOT EXISTS idx_forward_stats_timestamp ON forward_stats(timestamp);
                CREATE INDEX IF NOT EXISTS idx_target_chats_added_at ON target_chats(added_at);
            """)
            await db.commit()

    @staticmethod
    async def get_target_chats() -> List[int]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ ID —Ü–µ–ª–µ–≤—ã—Ö —á–∞—Ç–æ–≤"""
        async with DatabaseConnectionPool.get_connection() as db:
            async with db.execute("SELECT chat_id FROM target_chats") as cursor:
                return [row[0] for row in await cursor.fetchall()]

    @staticmethod
    async def add_target_chat(chat_id: int) -> None:
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Ü–µ–ª–µ–≤–æ–≥–æ —á–∞—Ç–∞"""
        async with DatabaseConnectionPool.get_connection() as db:
            await db.execute(
                "INSERT OR IGNORE INTO target_chats (chat_id) VALUES (?)",
                (chat_id,)
            )
            await db.commit()

    @staticmethod
    async def remove_target_chat(chat_id: int) -> None:
        """–£–¥–∞–ª–µ–Ω–∏–µ —Ü–µ–ª–µ–≤–æ–≥–æ —á–∞—Ç–∞"""
        async with DatabaseConnectionPool.get_connection() as db:
            await db.execute(
                "DELETE FROM target_chats WHERE chat_id = ?",
                (chat_id,)
            )
            await db.commit()

    @staticmethod
    async def get_config(key: str, default: Optional[str] = None) -> Optional[str]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
        async with DatabaseConnectionPool.get_connection() as db:
            async with db.execute(
                "SELECT value FROM config WHERE key = ?",
                (key,)
            ) as cursor:
                row = await cursor.fetchone()
                return row[0] if row else default

    @staticmethod
    async def set_config(key: str, value: str) -> None:
        """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–Ω–∞—á–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
        async with DatabaseConnectionPool.get_connection() as db:
            await db.execute(
                "INSERT OR REPLACE INTO config (key, value) VALUES (?, ?)",
                (key, str(value))
            )
            await db.commit()

    @staticmethod
    async def log_forward(message_id: int) -> None:
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–µ—Ä–µ—Å–ª–∞–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        async with DatabaseConnectionPool.get_connection() as db:
            await db.execute(
                "INSERT INTO forward_stats (message_id) VALUES (?)",
                (message_id,)
            )
            await db.commit()

    @staticmethod
    async def save_last_message(channel_id: str, message_id: int) -> None:
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ ID –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –∫–∞–Ω–∞–ª–∞"""
        async with DatabaseConnectionPool.get_connection() as db:
            await db.execute(
                """
                INSERT OR REPLACE INTO last_messages 
                (channel_id, message_id, timestamp) 
                VALUES (?, ?, CURRENT_TIMESTAMP)
                """,
                (channel_id, message_id)
            )
            await db.commit()

    @staticmethod
    async def get_last_message(channel_id: str) -> Optional[int]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ ID –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –∫–∞–Ω–∞–ª–∞"""
        async with DatabaseConnectionPool.get_connection() as db:
            async with db.execute(
                "SELECT message_id FROM last_messages WHERE channel_id = ?",
                (channel_id,)
            ) as cursor:
                row = await cursor.fetchone()
                return row[0] if row else None

    @staticmethod
    async def get_all_last_messages() -> Dict[str, Dict[str, Any]]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ ID –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –≤—Å–µ—Ö –∫–∞–Ω–∞–ª–æ–≤"""
        async with DatabaseConnectionPool.get_connection() as db:
            async with db.execute(
                "SELECT channel_id, message_id, timestamp FROM last_messages"
            ) as cursor:
                results = await cursor.fetchall()
                return {row[0]: {"message_id": row[1], "timestamp": row[2]} for row in results}

    @staticmethod
    async def get_latest_message() -> tuple:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–∞–º–æ–≥–æ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ –≤—Å–µ—Ö –∫–∞–Ω–∞–ª–æ–≤"""
        async with DatabaseConnectionPool.get_connection() as db:
            async with db.execute(
                "SELECT channel_id, message_id, timestamp FROM last_messages ORDER BY timestamp DESC LIMIT 1"
            ) as cursor:
                row = await cursor.fetchone()
                if row:
                    return (row[0], row[1])  # (channel_id, message_id)
                return (None, None)

    @staticmethod
    async def save_pinned_message(chat_id: str, message_id: int) -> None:
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ ID –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —á–∞—Ç–∞"""
        async with DatabaseConnectionPool.get_connection() as db:
            await db.execute(
                """
                INSERT OR REPLACE INTO pinned_messages 
                (chat_id, message_id, timestamp) 
                VALUES (?, ?, CURRENT_TIMESTAMP)
                """,
                (chat_id, message_id)
            )
            await db.commit()

    @staticmethod
    async def get_pinned_message(chat_id: str) -> Optional[int]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ ID –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —á–∞—Ç–∞"""
        async with DatabaseConnectionPool.get_connection() as db:
            async with db.execute(
                "SELECT message_id FROM pinned_messages WHERE chat_id = ?",
                (chat_id,)
            ) as cursor:
                row = await cursor.fetchone()
                return row[0] if row else None

    @staticmethod
    async def get_all_pinned_messages() -> Dict[str, int]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
        async with DatabaseConnectionPool.get_connection() as db:
            async with db.execute(
                "SELECT chat_id, message_id FROM pinned_messages"
            ) as cursor:
                results = await cursor.fetchall()
                return {row[0]: row[1] for row in results}

    @staticmethod
    async def delete_pinned_message(chat_id: str) -> None:
        """–£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –æ –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏"""
        async with DatabaseConnectionPool.get_connection() as db:
            await db.execute(
                "DELETE FROM pinned_messages WHERE chat_id = ?",
                (chat_id,)
            )
            await db.commit()

# Update the main function to handle cleanup
async def main():
    """Main entry point with improved error handling"""
    lock_file = "bot.lock"
    bot = None
    
    if os.path.exists(lock_file):
        try:
            with open(lock_file, 'r') as f:
                pid = int(f.read().strip())
            
            import psutil
            if psutil.pid_exists(pid):
                logger.error(f"Another instance is running (PID: {pid})")
                return
            os.remove(lock_file)
            logger.info("Cleaned up stale lock file")
        except Exception as e:
            logger.warning(f"Error handling lock file: {e}")
            if os.path.exists(lock_file):
                os.remove(lock_file)

    try:
        with open(lock_file, 'w') as f:
            f.write(str(os.getpid()))

        bot = ForwarderBot()
        await bot.start()
    finally:
        try:
            if bot:
                await bot.cleanup()  # Stop all child bots
            await Repository.close_db()
            if os.path.exists(lock_file):
                os.remove(lock_file)
        except Exception as e:
            logger.error(f"Error during cleanup: {e}")

# Main entry point with proper Windows multiprocessing support
if __name__ == "__main__":
    # Set multiprocessing start method for Windows compatibility
    if sys.platform.startswith('win'):
        multiprocessing.set_start_method('spawn', force=True)
    else:
        multiprocessing.set_start_method('spawn', force=True)  # Use spawn for all platforms for consistency
    
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        logger.info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        logger.error(f"–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏: {e}")