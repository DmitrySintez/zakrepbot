from abc import ABC, abstractmethod
from typing import Optional
import asyncio
from loguru import logger
from database.repository import Repository
from datetime import datetime, timedelta
from aiogram import types
from utils.message_utils import find_latest_message as find_msg

class BotState(ABC):
    """Abstract base class for bot states"""
    
    @abstractmethod
    async def start(self) -> None:
        """Handle start action"""
        pass
    
    @abstractmethod
    async def stop(self) -> None:
        """Handle stop action"""
        pass
    
    @abstractmethod
    async def handle_message(self, channel_id: str, message_id: int) -> None:
        """Handle message forwarding"""
        pass

class IdleState:
    """–°–æ—Å—Ç–æ—è–Ω–∏–µ, –∫–æ–≥–¥–∞ –±–æ—Ç –Ω–µ –ø–µ—Ä–µ—Å—ã–ª–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è"""
    
    def __init__(self, bot_context):
        self.context = bot_context
    
    async def start(self) -> None:
        """–ó–∞–ø—É—Å–∫ —Ä–∞–±–æ—Ç—ã –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é"""
        self.context.state = RunningState(self.context)
        await self.context._notify_admins("üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω! –†–∞–±–æ—Ç–∞ –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞.")
    
    async def stop(self) -> None:
        pass
    
    async def handle_message(self, channel_id: str, message_id: int) -> None:
        await Repository.save_last_message(channel_id, message_id)
        logger.info(f"–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ {message_id} –∏–∑ –∫–∞–Ω–∞–ª–∞ {channel_id} (–±–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω)")

class RunningState(BotState):
    """–°–æ—Å—Ç–æ—è–Ω–∏–µ, –∫–æ–≥–¥–∞ –±–æ—Ç –∞–∫—Ç–∏–≤–Ω–æ –∑–∞–∫—Ä–µ–ø–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é"""
    
    def __init__(self, bot_context, auto_forward: bool = True):
        self.context = bot_context
        self._schedule_task = None
        self._current_channel = None
        self._current_message_id = None
        self.auto_forward = auto_forward
        self._last_check_date = None
        self._start_schedule_task()
    
    def _start_schedule_task(self):
        """–ó–∞–ø—É—Å–∫ –∑–∞–¥–∞—á–∏ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è"""
        if not self._schedule_task or self._schedule_task.done():
            self._schedule_task = asyncio.create_task(self._schedule_check())
    
    async def _schedule_check(self):
        """–ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è —Å –ª–æ–≥–∏–∫–æ–π —Å–º–µ–Ω—ã –¥–Ω—è"""
        try:
            logger.info("üïê –ó–∞–ø—É—â–µ–Ω–∞ –∑–∞–¥–∞—á–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è")
            while True:
                current_date = datetime.now().date()
                current_time = datetime.now().strftime("%H:%M")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–º–µ–Ω–∏–ª—Å—è –ª–∏ –¥–µ–Ω—å
                if self._last_check_date != current_date:
                    logger.info(f"üìÖ –ù–æ–≤—ã–π –¥–µ–Ω—å: {current_date}. –°–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è.")
                    self._current_channel = None
                    self._current_message_id = None
                    self._last_check_date = current_date
                
                active_channel = await self._get_active_channel()
                
                if active_channel:
                    logger.debug(f"üì∫ –ê–∫—Ç–∏–≤–Ω—ã–π –∫–∞–Ω–∞–ª –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é: {active_channel}")
                    
                    # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –∫–∞–Ω–∞–ª–∞
                    latest_message_id = await Repository.get_last_message(active_channel)
                    
                    if latest_message_id:
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∏–∑–º–µ–Ω–∏–ª—Å—è –ª–∏ –∫–∞–Ω–∞–ª –∏–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ
                        channel_changed = active_channel != self._current_channel
                        message_changed = latest_message_id != self._current_message_id
                        
                        if channel_changed or message_changed:
                            logger.info(
                                f"üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ: –∫–∞–Ω–∞–ª {'–∏–∑–º–µ–Ω–∏–ª—Å—è' if channel_changed else '—Ç–æ—Ç –∂–µ'}, "
                                f"—Å–æ–æ–±—â–µ–Ω–∏–µ {'–Ω–æ–≤–æ–µ' if message_changed else '—Ç–æ –∂–µ'}"
                            )
                            
                            # –ü—ã—Ç–∞–µ–º—Å—è –ø–µ—Ä–µ—Å–ª–∞—Ç—å –∏ –∑–∞–∫—Ä–µ–ø–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ
                            success = await self.context.forward_and_pin_message(active_channel, latest_message_id)
                            
                            if success:
                                self._current_channel = None
                        self._current_message_id = None
                    
                    logger.debug(f"üïê –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤ –≤ {current_time}")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥ –¥–ª—è –±—ã—Å—Ç—Ä–æ–π —Ä–µ–∞–∫—Ü–∏–∏ –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è
                await asyncio.sleep(30)
                
        except asyncio.CancelledError:
            logger.info("‚èπÔ∏è –ó–∞–¥–∞—á–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ –∑–∞–¥–∞—á–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è: {e}")
            import traceback
            logger.error(f"Traceback: {traceback.format_exc()}")
            # –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º –∑–∞–¥–∞—á—É —á–µ—Ä–µ–∑ 10 —Å–µ–∫—É–Ω–¥
            await asyncio.sleep(10)
            if not self._schedule_task.cancelled():
                self._start_schedule_task()
    
    async def _get_active_channel(self) -> Optional[str]:
        """–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∫–∞–Ω–∞–ª–∞ –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é"""
        try:
            schedules = await Repository.get_schedules()
            current_time = datetime.now().strftime("%H:%M")
            
            for schedule in schedules:
                start_time = schedule["start_time"]
                end_time = schedule["end_time"]
                
                if self._is_time_in_range(current_time, start_time, end_time):
                    logger.debug(f"üìç –ù–∞–π–¥–µ–Ω –∞–∫—Ç–∏–≤–Ω—ã–π –∫–∞–Ω–∞–ª {schedule['channel_id']} –¥–ª—è –≤—Ä–µ–º–µ–Ω–∏ {current_time}")
                    return schedule["channel_id"]
            
            return None
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–∏ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∫–∞–Ω–∞–ª–∞: {e}")
            return None
    
    def _is_time_in_range(self, current_time: str, start_time: str, end_time: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞, –ø–æ–ø–∞–¥–∞–µ—Ç –ª–∏ —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –≤ –¥–∏–∞–ø–∞–∑–æ–Ω"""
        try:
            def time_to_minutes(time_str):
                h, m = map(int, time_str.split(':'))
                return h * 60 + m
            
            current_minutes = time_to_minutes(current_time)
            start_minutes = time_to_minutes(start_time)
            end_minutes = time_to_minutes(end_time)
            
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–µ—Ä–µ—Ö–æ–¥–∞ —á–µ—Ä–µ–∑ –ø–æ–ª–Ω–æ—á—å
            if end_minutes < start_minutes:
                # –î–∏–∞–ø–∞–∑–æ–Ω –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç —á–µ—Ä–µ–∑ –ø–æ–ª–Ω–æ—á—å (–Ω–∞–ø—Ä–∏–º–µ—Ä, 22:00 - 02:00)
                return current_minutes >= start_minutes or current_minutes < end_minutes
            else:
                # –û–±—ã—á–Ω—ã–π –¥–∏–∞–ø–∞–∑–æ–Ω –≤ —Ä–∞–º–∫–∞—Ö –æ–¥–Ω–æ–≥–æ –¥–Ω—è
                return start_minutes <= current_minutes < end_minutes
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –≤—Ä–µ–º–µ–Ω–∏: {e}")
            return False
    
    async def _unpin_current_messages(self):
        """–û—Ç–∫—Ä–µ–ø–ª–µ–Ω–∏–µ —Ç–µ–∫—É—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –≤–æ –≤—Å–µ—Ö —á–∞—Ç–∞—Ö"""
        try:
            target_chats = await Repository.get_target_chats()
            for chat_id in target_chats:
                pinned_message_id = await Repository.get_pinned_message(str(chat_id))
                if pinned_message_id:
                    try:
                        await self.context.bot.unpin_chat_message(
                            chat_id=chat_id,
                            message_id=pinned_message_id
                        )
                        await Repository.delete_pinned_message(str(chat_id))
                        logger.info(f"üìå –û—Ç–∫—Ä–µ–ø–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ {pinned_message_id} –≤ —á–∞—Ç–µ {chat_id}")
                    except Exception as e:
                        logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä–µ–ø–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç–µ {chat_id}: {e}")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫—Ä–µ–ø–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π: {e}")
    
    async def start(self) -> None:
        """–°–æ—Å—Ç–æ—è–Ω–∏–µ —É–∂–µ –∑–∞–ø—É—â–µ–Ω–æ"""
        pass
    
    async def stop(self) -> None:
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è"""
        if self._schedule_task and not self._schedule_task.done():
            self._schedule_task.cancel()
            try:
                await self._schedule_task
            except asyncio.CancelledError:
                pass
        
        # –û—Ç–∫—Ä–µ–ø–ª—è–µ–º –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ
        await self._unpin_current_messages()
        
        await self.context._notify_admins("‚èπÔ∏è –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –†–∞–±–æ—Ç–∞ –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞.")
        self.context.state = IdleState(self.context)
    
    async def handle_message(self, channel_id: str, message_id: int) -> None:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ –∫–∞–Ω–∞–ª–∞"""
        await Repository.save_last_message(channel_id, message_id)
        logger.info(f"üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ {message_id} –∏–∑ –∫–∞–Ω–∞–ª–∞ {channel_id}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∞–∫—Ç–∏–≤–µ–Ω –ª–∏ —ç—Ç–æ—Ç –∫–∞–Ω–∞–ª —Å–µ–π—á–∞—Å
        if await self._is_channel_active(channel_id):
            success = await self.context.forward_and_pin_message(channel_id, message_id)
            if success:
                self._current_message_id = message_id
                logger.info(f"üìå –ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ {message_id} –∏–∑ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∫–∞–Ω–∞–ª–∞ {channel_id} –ø–µ—Ä–µ—Å–ª–∞–Ω–æ –∏ –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–æ")
            else:
                logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ—Å–ª–∞—Ç—å –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ {message_id} –∏–∑ –∫–∞–Ω–∞–ª–∞ {channel_id}")
        else:
            logger.info(f"‚ÑπÔ∏è –ö–∞–Ω–∞–ª {channel_id} –Ω–µ –∞–∫—Ç–∏–≤–µ–Ω –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é, —Å–æ–æ–±—â–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ")
    
    async def _is_channel_active(self, channel_id: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞, –∞–∫—Ç–∏–≤–µ–Ω –ª–∏ –∫–∞–Ω–∞–ª –≤ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç"""
        try:
            schedules = await Repository.get_schedules()
            current_time = datetime.now().strftime("%H:%M")
            
            for schedule in schedules:
                if schedule["channel_id"] == channel_id:
                    start_time = schedule["start_time"]
                    end_time = schedule["end_time"]
                    
                    if self._is_time_in_range(current_time, start_time, end_time):
                        return True
            return False
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∫–∞–Ω–∞–ª–∞ {channel_id}: {e}")
            return False
    
    async def find_latest_message(self, channel_id: str) -> Optional[int]:
        """–ü–æ–∏—Å–∫ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –¥–æ—Å—Ç—É–ø–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –∫–∞–Ω–∞–ª–µ"""
        last_id = await Repository.get_last_message(channel_id)
        return await find_msg(self.context.bot, channel_id, self.context.config.owner_id, last_id)

    async def _rotate_to_next_channel(self) -> bool:
        """–ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏, —Ç–µ–ø–µ—Ä—å –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è"""
        logger.warning("–ú–µ—Ç–æ–¥ _rotate_to_next_channel –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ —Ä–µ–∂–∏–º–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è")
        return False

                
class BotContext:
    """–ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–π –∫–ª–∞—Å—Å, —É–ø—Ä–∞–≤–ª—è—é—â–∏–π —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º –±–æ—Ç–∞"""
    
    def __init__(self, bot, config):
        self.bot = bot
        self.config = config
        self.state: BotState = IdleState(self)
    
    async def start(self) -> None:
        await self.state.start()
    
    async def stop(self) -> None:
        await self.state.stop()
    
    async def handle_message(self, channel_id: str, message_id: int) -> None:
        await self.state.handle_message(channel_id, message_id)
    
    async def rotate_now(self) -> bool:
        """–ù–µ–º–µ–¥–ª–µ–Ω–Ω–æ –≤—ã–ø–æ–ª–Ω—è–µ—Ç —Ä–æ—Ç–∞—Ü–∏—é –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π –∫–∞–Ω–∞–ª"""
        if not isinstance(self.state, RunningState):
            logger.warning("–ù–µ–ª—å–∑—è –≤—ã–ø–æ–ª–Ω–∏—Ç—å –Ω–µ–º–µ–¥–ª–µ–Ω–Ω—É—é —Ä–æ—Ç–∞—Ü–∏—é: –±–æ—Ç –Ω–µ –∑–∞–ø—É—â–µ–Ω")
            return False
        
        return await self.state._rotate_to_next_channel()
    
    async def forward_and_pin_message(self, channel_id: str, message_id: int) -> bool:
        """–ü–µ—Ä–µ—Å—ã–ª–∫–∞ –∏ –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ –∫–∞–Ω–∞–ª–∞ –≤–æ –≤—Å–µ —Ü–µ–ª–µ–≤—ã–µ —á–∞—Ç—ã —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫"""
        try:
            target_chats = await Repository.get_target_chats()
            if not target_chats:
                logger.warning("‚ö†Ô∏è –ù–µ—Ç —Ü–µ–ª–µ–≤—ã—Ö —á–∞—Ç–æ–≤ –¥–ª—è –ø–µ—Ä–µ—Å—ã–ª–∫–∏")
                return False
            
            # –î–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –æ–±—â–µ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏
            success = False
            
            # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∫–∞–Ω–∞–ª–µ
            try:
                # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–æ–æ–±—â–µ–Ω–∏–∏, –ø–µ—Ä–µ—Å—ã–ª–∞—è —Å–µ–±–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
                await self.bot.forward_message(
                    chat_id=self.config.owner_id,
                    from_chat_id=channel_id,
                    message_id=message_id
                )
                logger.debug(f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ {message_id} –∏–∑ –∫–∞–Ω–∞–ª–∞ {channel_id} –¥–æ—Å—Ç—É–ø–Ω–æ")
            except Exception as e:
                logger.error(f"‚ùå –°–æ–æ–±—â–µ–Ω–∏–µ {message_id} –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ –≤ –∫–∞–Ω–∞–ª–µ {channel_id}: {e}")
                
                # –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ –±–æ–ª–µ–µ –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                logger.info(f"üîç –ü–æ–ø—ã—Ç–∫–∞ –Ω–∞–π—Ç–∏ –±–æ–ª–µ–µ –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∫–∞–Ω–∞–ª–µ {channel_id}")
                try:
                    from utils.message_utils import find_latest_message
                    latest_message_id = await find_latest_message(self.bot, channel_id, self.config.owner_id, message_id)
                    
                    if latest_message_id and latest_message_id != message_id:
                        logger.info(f"üì® –ù–∞–π–¥–µ–Ω–æ –±–æ–ª–µ–µ –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ {latest_message_id} –≤ –∫–∞–Ω–∞–ª–µ {channel_id}")
                        await Repository.save_last_message(channel_id, latest_message_id)
                        message_id = latest_message_id
                    else:
                        logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –Ω–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –∫–∞–Ω–∞–ª–µ {channel_id}")
                        return False
                except Exception as find_error:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –∫–∞–Ω–∞–ª–µ {channel_id}: {find_error}")
                    return False
            
            # –ü–µ—Ä–µ—Å—ã–ª–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤–æ –≤—Å–µ —Ü–µ–ª–µ–≤—ã–µ —á–∞—Ç—ã
            for chat_id in target_chats:
                try:
                    # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —ç—Ç–æ–≥–æ —á–∞—Ç–∞
                    prev_pinned = await Repository.get_pinned_message(str(chat_id))
                    
                    # –ü–µ—Ä–µ—Å—ã–ª–∞–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                    try:
                        fwd = await self.bot.forward_message(
                            chat_id=chat_id,
                            from_chat_id=channel_id,
                            message_id=message_id
                        )
                        logger.debug(f"üì§ –°–æ–æ–±—â–µ–Ω–∏–µ –ø–µ—Ä–µ—Å–ª–∞–Ω–æ –≤ —á–∞—Ç {chat_id}")
                        
                        # –ï—Å–ª–∏ —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ—Å–ª–∞–ª–∏, –ø—Ä–æ–±—É–µ–º –æ—Ç–∫—Ä–µ–ø–∏—Ç—å –ø—Ä–µ–¥—ã–¥—É—â–µ–µ 
                        if prev_pinned:
                            try:
                                await self.bot.unpin_chat_message(
                                    chat_id=chat_id,
                                    message_id=prev_pinned
                                )
                                logger.debug(f"üìå –û—Ç–∫—Ä–µ–ø–ª–µ–Ω–æ –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ {prev_pinned} –≤ —á–∞—Ç–µ {chat_id}")
                            except Exception as e:
                                logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä–µ–ø–∏—Ç—å –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç–µ {chat_id}: {e}")
                        
                        # –ó–∞–∫—Ä–µ–ø–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                        try:
                            await self.bot.pin_chat_message(
                                chat_id=chat_id,
                                message_id=fwd.message_id,
                                disable_notification=True
                            )
                            
                            # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –Ω–æ–≤–æ–≥–æ –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
                            await Repository.save_pinned_message(str(chat_id), fwd.message_id)
                            
                            # –ï—Å–ª–∏ —É –Ω–∞—Å –µ—Å—Ç—å —Å–ª–æ–≤–∞—Ä—å –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è, –æ–±–Ω–æ–≤–ª—è–µ–º –µ–≥–æ
                            if hasattr(self, 'pinned_messages'):
                                self.pinned_messages[str(chat_id)] = fwd.message_id
                            
                            logger.info(f"üìå –°–æ–æ–±—â–µ–Ω–∏–µ {message_id} –∏–∑ –∫–∞–Ω–∞–ª–∞ {channel_id} –ø–µ—Ä–µ—Å–ª–∞–Ω–æ –∏ –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–æ –≤ —á–∞—Ç {chat_id}")
                            success = True
                        except Exception as e:
                            logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–∫—Ä–µ–ø–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç–µ {chat_id}: {e}")
                            # –î–∞–∂–µ –µ—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –∑–∞–∫—Ä–µ–ø–∏—Ç—å, –ø–µ—Ä–µ—Å—ã–ª–∫–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ
                            success = True
                    except Exception as e:
                        logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ—Å–ª–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –∫–∞–Ω–∞–ª–∞ {channel_id} –≤ —á–∞—Ç {chat_id}: {e}")
                except Exception as e:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —á–∞—Ç–∞ {chat_id}: {e}")
            
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ–±—â–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –æ–ø–µ—Ä–∞—Ü–∏–∏
            return success
        except Exception as e:
            logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ forward_and_pin_message: {e}")
            import traceback
            logger.error(f"Traceback: {traceback.format_exc()}")
            return False
    async def _notify_admins(self, message: str):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤—Å–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º –±–æ—Ç–∞"""
        for admin_id in self.config.admin_ids:
            try:
                await self.bot.send_message(admin_id, message)
            except Exception as e:
                logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ {admin_id}: {e}")